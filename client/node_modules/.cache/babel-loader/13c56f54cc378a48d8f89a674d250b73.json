{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/home.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport '../styles/home.style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends React.Component {\n  constructor() {\n    super();\n\n    this.StopStreaming = () => {\n      alert(123);\n    };\n\n    this.StartStream = () => {\n      // === socket handler ===\n      const peerConnections = {};\n      const config = {\n        iceServers: [{\n          urls: [\"stun:stun.l.google.com:19302\"]\n        }]\n      };\n      const socket = io('localhost:5000');\n      const video = document.querySelector(\"video\"); // Media contrains\n\n      const constraints = {\n        video: {\n          facingMode: \"user\"\n        },\n        audio: true\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n        video.srcObject = stream; // socket.emit(\"broadcaster\");\n      }).catch(err => console.error(err)); // socket.on(\"watcher\", id => {\n      //      const peerConnection = new RTCPeerConnection(config);\n      //      peerConnections[id] = peerConnection;\n      //      let stream = video.srcObject;\n      //      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n      //      peerConnection.onicecandidate = event => {\n      //           if (event.candidate) {\n      //                socket.emit(\"candidate\", id, event.candidate);\n      //           }\n      //      };\n      //      peerConnection\n      //           .createOffer()\n      //           .then(sdp => peerConnection.setLocalDescription(sdp))\n      //           .then(() => {\n      //                socket.emit(\"offer\", id, peerConnection.localDescription);\n      //           });\n      // });\n      // socket.on(\"answer\", (id, description) => {\n      //      peerConnections[id].setRemoteDescription(description);\n      // });\n      // socket.on(\"candidate\", (id, candidate) => {\n      //      peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n      // });\n    };\n  } // Stop streamming\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Streamer online\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"User: hoangnd\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"control-btn\",\n          onClick: this.StartStream,\n          children: \"Start streaming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stream-screen\",\n          style: {\n            margin: '20px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            playsInline: true,\n            autoPlay: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/home.page.js"],"names":["React","io","Home","Component","constructor","StopStreaming","alert","StartStream","peerConnections","config","iceServers","urls","socket","video","document","querySelector","constraints","facingMode","audio","navigator","mediaDevices","getUserMedia","then","stream","srcObject","catch","err","console","error","render","margin"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,0BAAP;;;AAEA,MAAMC,IAAN,SAAmBF,KAAK,CAACG,SAAzB,CAAmC;AAC9BC,EAAAA,WAAW,GAAG;AACT;;AADS,SAKdC,aALc,GAKE,MAAM;AACjBC,MAAAA,KAAK,CAAC,GAAD,CAAL;AACJ,KAPa;;AAAA,SAUdC,WAVc,GAUA,MAAM;AACf;AACA,YAAMC,eAAe,GAAG,EAAxB;AACA,YAAMC,MAAM,GAAG;AACVC,QAAAA,UAAU,EAAE,CACP;AACKC,UAAAA,IAAI,EAAE,CAAC,8BAAD;AADX,SADO;AADF,OAAf;AAQA,YAAMC,MAAM,GAAGX,EAAE,CAAC,gBAAD,CAAjB;AACA,YAAMY,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CAZe,CAcf;;AACA,YAAMC,WAAW,GAAG;AACfH,QAAAA,KAAK,EAAE;AAAEI,UAAAA,UAAU,EAAE;AAAd,SADQ;AAEfC,QAAAA,KAAK,EAAE;AAFQ,OAApB;AAKAC,MAAAA,SAAS,CAACC,YAAV,CACMC,YADN,CACmBL,WADnB,EAEMM,IAFN,CAEWC,MAAM,IAAI;AACXV,QAAAA,KAAK,CAACW,SAAN,GAAkBD,MAAlB,CADW,CAEX;AACJ,OALN,EAMME,KANN,CAMYC,GAAG,IAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CANnB,EApBe,CA4Bf;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACJ,KAlEa;AAEb,GAH6B,CAK9B;;;AAgEAG,EAAAA,MAAM,GAAG;AACJ,wBACK;AAAA,8BACK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADL,eAEK;AAAA;AAAA;AAAA;AAAA,cAFL,eAKK;AAAA;AAAA;AAAA;AAAA,cALL,eAMK;AAAA,qDAEA;AAAQ,UAAA,EAAE,EAAC,aAAX;AAAyB,UAAA,OAAO,EAAE,KAAKtB,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFA,eAGK;AAAK,UAAA,EAAE,EAAC,eAAR;AAAwB,UAAA,KAAK,EAAE;AAAEuB,YAAAA,MAAM,EAAE;AAAV,WAA/B;AAAA,iCACK;AAAO,YAAA,WAAW,MAAlB;AAAmB,YAAA,QAAQ,MAA3B;AAA4B,YAAA,KAAK;AAAjC;AAAA;AAAA;AAAA;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,gBAHL;AAAA;AAAA;AAAA;AAAA;AAAA,cANL;AAAA;AAAA;AAAA;AAAA;AAAA,YADL;AAgBJ;;AAtF6B;;AAyFnC,eAAe5B,IAAf","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport '../styles/home.style.css'\n\nclass Home extends React.Component {\n     constructor() {\n          super()\n     }\n\n     // Stop streamming\n     StopStreaming = () => {\n          alert(123)\n     }\n\n     // Start streaming\n     StartStream = () => {\n          // === socket handler ===\n          const peerConnections = {};\n          const config = {\n               iceServers: [\n                    {\n                         urls: [\"stun:stun.l.google.com:19302\"]\n                    }\n               ]\n          };\n\n          const socket = io('localhost:5000');\n          const video = document.querySelector(\"video\");\n\n          // Media contrains\n          const constraints = {\n               video: { facingMode: \"user\" },\n               audio: true,\n          };\n\n          navigator.mediaDevices\n               .getUserMedia(constraints)\n               .then(stream => {\n                    video.srcObject = stream;\n                    // socket.emit(\"broadcaster\");\n               })\n               .catch(err => console.error(err))\n\n          // socket.on(\"watcher\", id => {\n          //      const peerConnection = new RTCPeerConnection(config);\n          //      peerConnections[id] = peerConnection;\n\n          //      let stream = video.srcObject;\n          //      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n\n          //      peerConnection.onicecandidate = event => {\n          //           if (event.candidate) {\n          //                socket.emit(\"candidate\", id, event.candidate);\n          //           }\n          //      };\n\n          //      peerConnection\n          //           .createOffer()\n          //           .then(sdp => peerConnection.setLocalDescription(sdp))\n          //           .then(() => {\n          //                socket.emit(\"offer\", id, peerConnection.localDescription);\n          //           });\n          // });\n\n          // socket.on(\"answer\", (id, description) => {\n          //      peerConnections[id].setRemoteDescription(description);\n          // });\n\n          // socket.on(\"candidate\", (id, candidate) => {\n          //      peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n          // });\n     }\n\n     render() {\n          return (\n               <div>\n                    <h1>Streamer online</h1>\n                    <ul>\n\n                    </ul>\n                    <hr></hr>\n                    <div>\n                         User: hoangnd&nbsp;\n                    <button id='control-btn' onClick={this.StartStream}>Start streaming</button>\n                         <div id='stream-screen' style={{ margin: '20px' }}>\n                              <video playsInline autoPlay muted></video>\n                         </div>\n                    </div>\n               </div>\n          )\n     }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}