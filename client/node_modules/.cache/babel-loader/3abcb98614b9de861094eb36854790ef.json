{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport '../styles/home.style.css';\nimport { config } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor() {\n    super();\n\n    this.StopStreaming = () => {};\n\n    this.ShareScreen = () => {};\n\n    this.state = {\n      // client list\n      peerConnections: {},\n      // socket connection\n      socket: io(`${config.NODE_IP}:${config.NODE_PORT}`)\n    };\n  } // Stop streamming\n\n\n  componentDidMount() {\n    const video = document.querySelector(\"video\"); // Use camera\n\n    navigator.mediaDevices.getUserMedia(config.VIDEO_CONSTRAINS).then(stream => {\n      video.srcObject = stream;\n      this.state.socket.emit(\"broadcaster\");\n    }).catch(error => console.error(error)); // Use screen\n    // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n    //     .then(function (mediaStream) {\n    //         video.srcObject = mediaStream;\n    //         socket.emit(\"broadcaster\");\n    //     })\n    //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n    // Socket handler\n\n    this.state.socket.on(\"start-watching\", clientId => {\n      console.log(123);\n      const peerConnection = new RTCPeerConnection(config); // this.state.peerConnections[clientId] = peerConnection;\n\n      let newPeerConnections = this.state.peerConnections;\n      newPeerConnections[clientId] = peerConnection;\n      console.log(123);\n      this.setState({\n        peerConnections: newPeerConnections\n      });\n      console.log(this.state.peerConnections);\n      let stream = video.srcObject;\n      stream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, stream);\n      });\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          this.state.socket.emit(\"candidate\", clientId, event.candidate);\n        }\n      };\n\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n      });\n    });\n    this.state.socket.on(\"answer\", (id, description) => {\n      this.state.peerConnections[id].setRemoteDescription(description);\n    });\n    this.state.socket.on(\"candidate\", (id, candidate) => {\n      this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    this.state.socket.on(\"disconnectPeer\", id => {\n      this.state.peerConnections[id].close();\n      delete this.state.peerConnections[id];\n      console.log(this.state.peerConnections);\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      this.state.socket.close();\n    };\n  } // Start streaming\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"User: hoangnd\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"control-btn\",\n        onClick: this.StartStream,\n        children: \"Start streaming\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stream-screen\",\n        style: {\n          margin: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          playsInline: true,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","config","BroadCaster","Component","constructor","StopStreaming","ShareScreen","state","peerConnections","socket","NODE_IP","NODE_PORT","componentDidMount","video","document","querySelector","navigator","mediaDevices","getUserMedia","VIDEO_CONSTRAINS","then","stream","srcObject","emit","catch","error","console","on","clientId","log","peerConnection","RTCPeerConnection","newPeerConnections","setState","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","createOffer","sdp","setLocalDescription","localDescription","id","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","close","window","onunload","onbeforeunload","render","StartStream","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport '../styles/home.style.css'\nimport { config } from '../config'\n\nclass BroadCaster extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            // client list\n            peerConnections: {},\n            // socket connection\n            socket: io(`${config.NODE_IP}:${config.NODE_PORT}`)\n        }\n    }\n\n    // Stop streamming\n    StopStreaming = () => {\n\n    }\n\n    componentDidMount() {\n        const video = document.querySelector(\"video\");\n\n        // Use camera\n        navigator.mediaDevices\n            .getUserMedia(config.VIDEO_CONSTRAINS)\n            .then(stream => {\n                video.srcObject = stream;\n                this.state.socket.emit(\"broadcaster\");\n            })\n            .catch(error => console.error(error));\n\n        // Use screen\n        // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n        //     .then(function (mediaStream) {\n        //         video.srcObject = mediaStream;\n        //         socket.emit(\"broadcaster\");\n        //     })\n        //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n\n        // Socket handler\n        this.state.socket.on(\"start-watching\", clientId => {\n            console.log(123)\n\n            const peerConnection = new RTCPeerConnection(config);\n            // this.state.peerConnections[clientId] = peerConnection;\n\n            let newPeerConnections = this.state.peerConnections\n            newPeerConnections[clientId] = peerConnection\n\n            console.log(123)\n            this.setState({\n                peerConnections: newPeerConnections\n            })\n\n            console.log(this.state.peerConnections)\n\n            let stream = video.srcObject;\n            stream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, stream)\n            });\n\n            peerConnection.onicecandidate = event => {\n                if (event.candidate) {\n                    this.state.socket.emit(\"candidate\", clientId, event.candidate);\n                }\n            };\n\n            peerConnection\n                .createOffer()\n                .then(sdp => peerConnection.setLocalDescription(sdp))\n                .then(() => {\n                    this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n                });\n        });\n\n        this.state.socket.on(\"answer\", (id, description) => {\n            this.state.peerConnections[id].setRemoteDescription(description);\n        });\n\n        this.state.socket.on(\"candidate\", (id, candidate) => {\n            this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        this.state.socket.on(\"disconnectPeer\", id => {\n            this.state.peerConnections[id].close();\n            delete this.state.peerConnections[id];\n            console.log(this.state.peerConnections)\n        });\n\n        window.onunload = window.onbeforeunload = () => {\n            this.state.socket.close();\n        };\n    }\n\n    // Start streaming\n    ShareScreen = () => {\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                User: hoangnd&nbsp;\n                <button id='control-btn' onClick={this.StartStream}>Start streaming</button>\n                <div id='stream-screen' style={{ margin: '20px' }}>\n                    <video playsInline autoPlay muted></video>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}