{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport '../styles/home.style.css';\nimport { config } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor() {\n    // client list\n    this.peerConnections = {}; // socket connection\n\n    this.socket = io(`${config.NODE_IP}:${config.NODE_PORT}`);\n  } // Stop streamming\n\n\n  componentDidMount() {\n    const video = document.querySelector(\"video\"); // Use camera\n\n    navigator.mediaDevices.getUserMedia(config.VIDEO_CONSTRAINS).then(stream => {\n      video.srcObject = stream;\n      this.socket.emit(\"broadcaster\");\n    }).catch(error => console.error(error)); // Use screen\n    // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n    //     .then(function (mediaStream) {\n    //         video.srcObject = mediaStream;\n    //         socket.emit(\"broadcaster\");\n    //     })\n    //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n    // Socket handler\n\n    this.socket.on(\"start-watching\", clientId => {\n      const peerConnection = new RTCPeerConnection(config);\n      this.peerConnections[clientId] = peerConnection;\n      let stream = video.srcObject;\n      stream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, stream);\n      });\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(\"candidate\", clientId, event.candidate);\n        }\n      };\n\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        socket.emit(\"offer\", clientId, peerConnection.localDescription);\n      });\n    });\n    socket.on(\"answer\", (id, description) => {\n      peerConnections[id].setRemoteDescription(description);\n    });\n    socket.on(\"candidate\", (id, candidate) => {\n      peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    socket.on(\"disconnectPeer\", id => {\n      peerConnections[id].close();\n      delete peerConnections[id];\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      socket.close();\n    };\n  } // Start streaming\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"User: hoangnd\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"control-btn\",\n        onClick: this.StartStream,\n        children: \"Start streaming\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stream-screen\",\n        style: {\n          margin: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          playsInline: true,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","config","BroadCaster","Component","constructor","peerConnections","socket","NODE_IP","NODE_PORT","componentDidMount","video","document","querySelector","navigator","mediaDevices","getUserMedia","VIDEO_CONSTRAINS","then","stream","srcObject","emit","catch","error","console","on","clientId","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","createOffer","sdp","setLocalDescription","localDescription","id","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","close","window","onunload","onbeforeunload","render","StartStream","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport '../styles/home.style.css'\nimport { config } from '../config'\n\nclass BroadCaster extends React.Component {\n    constructor() {\n        // client list\n        this.peerConnections = {};\n\n        // socket connection\n        this.socket = io(`${config.NODE_IP}:${config.NODE_PORT}`);\n    }\n\n    // Stop streamming\n    StopStreaming = () => {\n\n    }\n\n    componentDidMount() {\n        const video = document.querySelector(\"video\");\n\n        // Use camera\n        navigator.mediaDevices\n            .getUserMedia(config.VIDEO_CONSTRAINS)\n            .then(stream => {\n                video.srcObject = stream;\n                this.socket.emit(\"broadcaster\");\n            })\n            .catch(error => console.error(error));\n\n        // Use screen\n        // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n        //     .then(function (mediaStream) {\n        //         video.srcObject = mediaStream;\n        //         socket.emit(\"broadcaster\");\n        //     })\n        //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n\n        // Socket handler\n        this.socket.on(\"start-watching\", clientId => {\n            const peerConnection = new RTCPeerConnection(config);\n            this.peerConnections[clientId] = peerConnection;\n\n            let stream = video.srcObject;\n            stream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, stream)\n            });\n\n            peerConnection.onicecandidate = event => {\n                if (event.candidate) {\n                    socket.emit(\"candidate\", clientId, event.candidate);\n                }\n            };\n\n            peerConnection\n                .createOffer()\n                .then(sdp => peerConnection.setLocalDescription(sdp))\n                .then(() => {\n                    socket.emit(\"offer\", clientId, peerConnection.localDescription);\n                });\n        });\n\n        socket.on(\"answer\", (id, description) => {\n            peerConnections[id].setRemoteDescription(description);\n        });\n\n        socket.on(\"candidate\", (id, candidate) => {\n            peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        socket.on(\"disconnectPeer\", id => {\n            peerConnections[id].close();\n            delete peerConnections[id];\n        });\n\n        window.onunload = window.onbeforeunload = () => {\n            socket.close();\n        };\n    }\n\n    // Start streaming\n    ShareScreen = () => {\n\n\n    }\n\n    render() {\n        return (\n            <div>\n                User: hoangnd&nbsp;\n                <button id='control-btn' onClick={this.StartStream}>Start streaming</button>\n                <div id='stream-screen' style={{ margin: '20px' }}>\n                    <video playsInline autoPlay muted></video>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}