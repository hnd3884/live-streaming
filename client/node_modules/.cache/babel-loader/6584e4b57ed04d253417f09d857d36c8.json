{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js\";\nimport React from \"react\";\nimport '../styles/home.style.css';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Watch extends React.Component {\n  // constructor(){\n  //      super()\n  // }\n  componentDidMount() {\n    let peerConnection;\n    const config = {\n      iceServers: [{\n        urls: [\"stun:stun.l.google.com:19302\"]\n      }]\n    };\n    const socket = io('localhost:5000');\n    const video = document.querySelector(\"video\");\n    socket.on(\"offer\", (id, description) => {\n      peerConnection = new RTCPeerConnection(config);\n      peerConnection.setRemoteDescription(description).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        socket.emit(\"answer\", id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = event => {\n        video.srcObject = event.streams[0];\n      };\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(\"candidate\", id, event.candidate);\n        }\n      };\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      playsInline: true,\n      autoPlay: true,\n      muted: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Watch;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js"],"names":["React","io","Watch","Component","componentDidMount","peerConnection","config","iceServers","urls","socket","video","document","querySelector","on","id","description","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","event","srcObject","streams","onicecandidate","candidate","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAC/B;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AACf,QAAIC,cAAJ;AACA,UAAMC,MAAM,GAAG;AACVC,MAAAA,UAAU,EAAE,CACP;AACKC,QAAAA,IAAI,EAAE,CAAC,8BAAD;AADX,OADO;AADF,KAAf;AAQA,UAAMC,MAAM,GAAGR,EAAE,CAAC,gBAAD,CAAjB;AACA,UAAMS,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AAEAH,IAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,CAACC,EAAD,EAAKC,WAAL,KAAqB;AACnCV,MAAAA,cAAc,GAAG,IAAIW,iBAAJ,CAAsBV,MAAtB,CAAjB;AACAD,MAAAA,cAAc,CACRY,oBADN,CAC2BF,WAD3B,EAEMG,IAFN,CAEW,MAAMb,cAAc,CAACc,YAAf,EAFjB,EAGMD,IAHN,CAGWE,GAAG,IAAIf,cAAc,CAACgB,mBAAf,CAAmCD,GAAnC,CAHlB,EAIMF,IAJN,CAIW,MAAM;AACPT,QAAAA,MAAM,CAACa,IAAP,CAAY,QAAZ,EAAsBR,EAAtB,EAA0BT,cAAc,CAACkB,gBAAzC;AACJ,OANN;;AAOAlB,MAAAA,cAAc,CAACmB,OAAf,GAAyBC,KAAK,IAAI;AAC7Bf,QAAAA,KAAK,CAACgB,SAAN,GAAkBD,KAAK,CAACE,OAAN,CAAc,CAAd,CAAlB;AACJ,OAFD;;AAGAtB,MAAAA,cAAc,CAACuB,cAAf,GAAgCH,KAAK,IAAI;AACpC,YAAIA,KAAK,CAACI,SAAV,EAAqB;AAChBpB,UAAAA,MAAM,CAACa,IAAP,CAAY,WAAZ,EAAyBR,EAAzB,EAA6BW,KAAK,CAACI,SAAnC;AACJ;AACL,OAJD;AAKJ,KAjBD;AAkBJ;;AAEDC,EAAAA,MAAM,GAAG;AACJ,wBACK;AAAO,MAAA,WAAW,MAAlB;AAAmB,MAAA,QAAQ,MAA3B;AAA4B,MAAA,KAAK;AAAjC;AAAA;AAAA;AAAA;AAAA,YADL;AAGJ;;AA1C8B;;AA6CpC,eAAe5B,KAAf","sourcesContent":["import React from \"react\";\nimport '../styles/home.style.css'\nimport io from 'socket.io-client'\n\nclass Watch extends React.Component {\n     // constructor(){\n     //      super()\n     // }\n\n     componentDidMount() {\n          let peerConnection;\n          const config = {\n               iceServers: [\n                    {\n                         urls: [\"stun:stun.l.google.com:19302\"]\n                    }\n               ]\n          };\n\n          const socket = io('localhost:5000');\n          const video = document.querySelector(\"video\");\n\n          socket.on(\"offer\", (id, description) => {\n               peerConnection = new RTCPeerConnection(config);\n               peerConnection\n                    .setRemoteDescription(description)\n                    .then(() => peerConnection.createAnswer())\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\n                    .then(() => {\n                         socket.emit(\"answer\", id, peerConnection.localDescription);\n                    });\n               peerConnection.ontrack = event => {\n                    video.srcObject = event.streams[0];\n               };\n               peerConnection.onicecandidate = event => {\n                    if (event.candidate) {\n                         socket.emit(\"candidate\", id, event.candidate);\n                    }\n               };\n          });\n     }\n\n     render() {\n          return (\n               <video playsInline autoPlay muted></video>\n          )\n     }\n}\n\nexport default Watch;"]},"metadata":{},"sourceType":"module"}