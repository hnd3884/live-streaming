{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport '../styles/home.style.css';\nimport { config } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor() {\n    super();\n\n    this.StopStreaming = () => {};\n\n    this.ShareScreen = () => {\n      const videoScreen = document.getElementById(\"screen\");\n      navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS).then(function (mediaStream) {\n        videoScreen.srcObject = mediaStream; // this.state.socket.emit(\"broadcaster\");\n      }).catch(function (err) {\n        console.log(err.name + \": \" + err.message);\n      });\n      let stream = videoScreen.srcObject;\n      stream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, stream);\n      });\n    };\n\n    this.state = {\n      // client list\n      peerConnections: {},\n      // socket connection\n      socket: io(`${config.NODE_IP}:${config.NODE_PORT}`)\n    };\n  }\n\n  componentDidMount() {\n    const videoCamera = document.getElementById(\"camera\"); // Use camera\n\n    navigator.mediaDevices.getUserMedia(config.VIDEO_CONSTRAINS).then(stream => {\n      videoCamera.srcObject = stream;\n      this.state.socket.emit(\"broadcaster\");\n    }).catch(error => console.error(error)); // Use screen\n    // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n    //     .then(function (mediaStream) {\n    //         video.srcObject = mediaStream;\n    //         socket.emit(\"broadcaster\");\n    //     })\n    //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n    // Socket handler\n\n    this.state.socket.on(\"start-watching\", clientId => {\n      const peerConnection = new RTCPeerConnection(config); // update state\n\n      this.setState(prevState => {\n        let newPeerConnections = prevState.peerConnections;\n        newPeerConnections[clientId] = peerConnection;\n        return {\n          socket: this.state.socket,\n          peerConnections: newPeerConnections\n        };\n      });\n      let stream = videoCamera.srcObject;\n      stream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, stream);\n      });\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          this.state.socket.emit(\"candidate\", clientId, event.candidate);\n        }\n      };\n\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n      });\n    });\n    this.state.socket.on(\"answer\", (id, description) => {\n      this.state.peerConnections[id].setRemoteDescription(description);\n    });\n    this.state.socket.on(\"candidate\", (id, candidate) => {\n      this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    this.state.socket.on(\"disconnectPeer\", id => {\n      this.state.peerConnections[id].close();\n      delete this.state.peerConnections[id];\n      console.log(this.state.peerConnections);\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      this.state.socket.close();\n    };\n  } // Stop streamming\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"User: hoangnd\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"control-btn\",\n        onClick: this.ShareScreen,\n        children: \"Share screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stream-screen\",\n        style: {\n          margin: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"camera\",\n          playsInline: true,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), \"\\xA0 \\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"screen\",\n          playsInline: true,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","config","BroadCaster","Component","constructor","StopStreaming","ShareScreen","videoScreen","document","getElementById","navigator","mediaDevices","getDisplayMedia","VIDEO_CONSTRAINS","then","mediaStream","srcObject","catch","err","console","log","name","message","stream","getTracks","forEach","track","peerConnection","addTrack","state","peerConnections","socket","NODE_IP","NODE_PORT","componentDidMount","videoCamera","getUserMedia","emit","error","on","clientId","RTCPeerConnection","setState","prevState","newPeerConnections","onicecandidate","event","candidate","createOffer","sdp","setLocalDescription","localDescription","id","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","close","window","onunload","onbeforeunload","render","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport '../styles/home.style.css'\nimport { config } from '../config'\n\nclass BroadCaster extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            // client list\n            peerConnections: {},\n            // socket connection\n            socket: io(`${config.NODE_IP}:${config.NODE_PORT}`)\n        }\n    }\n\n    componentDidMount() {\n        const videoCamera = document.getElementById(\"camera\");\n\n        // Use camera\n        navigator.mediaDevices\n            .getUserMedia(config.VIDEO_CONSTRAINS)\n            .then(stream => {\n                videoCamera.srcObject = stream;\n                this.state.socket.emit(\"broadcaster\");\n            })\n            .catch(error => console.error(error));\n\n        // Use screen\n        // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n        //     .then(function (mediaStream) {\n        //         video.srcObject = mediaStream;\n        //         socket.emit(\"broadcaster\");\n        //     })\n        //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n\n        // Socket handler\n        this.state.socket.on(\"start-watching\", clientId => {\n            const peerConnection = new RTCPeerConnection(config);\n\n            // update state\n            this.setState(prevState => {\n                let newPeerConnections = prevState.peerConnections\n                newPeerConnections[clientId] = peerConnection\n                return {\n                    socket: this.state.socket,\n                    peerConnections: newPeerConnections\n                }\n            })\n\n            let stream = videoCamera.srcObject;\n            stream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, stream)\n            });\n\n            peerConnection.onicecandidate = event => {\n                if (event.candidate) {\n                    this.state.socket.emit(\"candidate\", clientId, event.candidate);\n                }\n            };\n\n            peerConnection\n                .createOffer()\n                .then(sdp => peerConnection.setLocalDescription(sdp))\n                .then(() => {\n                    this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n                });\n        });\n\n        this.state.socket.on(\"answer\", (id, description) => {\n            this.state.peerConnections[id].setRemoteDescription(description);\n        });\n\n        this.state.socket.on(\"candidate\", (id, candidate) => {\n            this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        this.state.socket.on(\"disconnectPeer\", id => {\n            this.state.peerConnections[id].close();\n            delete this.state.peerConnections[id];\n            console.log(this.state.peerConnections)\n        });\n\n        window.onunload = window.onbeforeunload = () => {\n            this.state.socket.close();\n        };\n    }\n\n    // Stop streamming\n    StopStreaming = () => {\n\n    }\n\n    // Start streaming\n    ShareScreen = () => {\n        const videoScreen = document.getElementById(\"screen\");\n\n        navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n            .then(function (mediaStream) {\n                videoScreen.srcObject = mediaStream;\n                // this.state.socket.emit(\"broadcaster\");\n            })\n            .catch(function (err) { console.log(err.name + \": \" + err.message); });\n\n        let stream = videoScreen.srcObject;\n        stream.getTracks().forEach(track => {\n            peerConnection.addTrack(track, stream)\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                User: hoangnd&nbsp;\n                <button id='control-btn' onClick={this.ShareScreen}>Share screen</button>\n                <div id='stream-screen' style={{ margin: '20px' }}>\n                    <video id='camera' playsInline autoPlay muted></video>\n                    &nbsp;\n                    &nbsp;\n                    &nbsp;\n                    <video id='screen' playsInline autoPlay muted></video>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}