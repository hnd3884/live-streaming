{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js\";\nimport React from \"react\";\nimport './styles/home.style.css';\nimport io from 'socket.io-client';\nimport configs from '../config';\nimport NavBar from \"../components/navbar.component\";\nimport authService from \"../services/auth.service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Watch extends React.Component {\n  constructor(props) {\n    super(props); // check if user did not sign in\n\n    let user = authService.getCurrentUser();\n\n    if (!user) {\n      this.props.history.push('/login');\n      window.location.reload();\n    }\n\n    this.state = {\n      user: JSON.parse(user)\n    };\n  }\n\n  componentDidMount() {\n    // locate broadcaster id\n    let broadcasterId = this.props.id; // peer connection to broadcaster\n\n    let peerConnection; // socket connection\n\n    const socket = io(`${configs.API_URL}`);\n    const video = document.getElementById(\"camera\"); // socket handler\n\n    socket.on(\"offer\", (id, description) => {\n      console.log('offer');\n      peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n      peerConnection.setRemoteDescription(description).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        socket.emit(\"answer\", id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = event => {\n        video.srcObject = event.streams[0];\n      };\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(\"candidate\", id, event.candidate);\n        }\n      };\n    });\n    socket.on(\"candidate\", (id, candidate) => {\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(e => console.error(e));\n    });\n    socket.on(\"connect\", () => {\n      socket.emit(\"start-watching\", broadcasterId);\n    });\n    socket.on(\"broadcaster\", () => {\n      socket.emit(\"watcher\");\n    });\n\n    window.onunload = window.beforeunload = () => {\n      socket.close();\n      peerConnection.close();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        user: this.state.user,\n        history: this.props.history,\n        isStreaming: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        playsInline: true,\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Watch;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js"],"names":["React","io","configs","NavBar","authService","Watch","Component","constructor","props","user","getCurrentUser","history","push","window","location","reload","state","JSON","parse","componentDidMount","broadcasterId","id","peerConnection","socket","API_URL","video","document","getElementById","on","description","console","log","RTCPeerConnection","STUN_CONFIG","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","event","srcObject","streams","onicecandidate","candidate","addIceCandidate","RTCIceCandidate","catch","e","error","onunload","beforeunload","close","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './styles/home.style.css'\nimport io from 'socket.io-client'\nimport configs from '../config'\nimport NavBar from \"../components/navbar.component\";\nimport authService from \"../services/auth.service\";\n\nclass Watch extends React.Component {\n\n     constructor(props) {\n          super(props)\n\n          // check if user did not sign in\n          let user = authService.getCurrentUser();\n          if (!user) {\n               this.props.history.push('/login')\n               window.location.reload()\n          }\n\n          this.state = {\n               user: JSON.parse(user)\n          }\n     }\n\n     componentDidMount() {\n          // locate broadcaster id\n          let broadcasterId = this.props.id\n\n          // peer connection to broadcaster\n          let peerConnection;\n\n          // socket connection\n          const socket = io(`${configs.API_URL}`);\n\n          const video = document.getElementById(\"camera\");\n\n          // socket handler\n          socket.on(\"offer\", (id, description) => {\n               console.log('offer')\n               peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n               peerConnection\n                    .setRemoteDescription(description)\n                    .then(() => peerConnection.createAnswer())\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\n                    .then(() => {\n                         socket.emit(\"answer\", id, peerConnection.localDescription);\n                    });\n               peerConnection.ontrack = event => {\n                    video.srcObject = event.streams[0];\n               };\n               peerConnection.onicecandidate = event => {\n                    if (event.candidate) {\n                         socket.emit(\"candidate\", id, event.candidate);\n                    }\n               };\n          });\n\n          socket.on(\"candidate\", (id, candidate) => {\n               peerConnection\n                    .addIceCandidate(new RTCIceCandidate(candidate))\n                    .catch(e => console.error(e));\n          });\n\n          socket.on(\"connect\", () => {\n               socket.emit(\"start-watching\", broadcasterId);\n          });\n\n          socket.on(\"broadcaster\", () => {\n               socket.emit(\"watcher\");\n          });\n\n          window.onunload = window.beforeunload = () => {\n               socket.close();\n               peerConnection.close();\n          };\n\n     }\n\n     render() {\n          return (\n               <div>\n                    <NavBar user={this.state.user} history={this.props.history} isStreaming={true} />\n                    <video playsInline autoPlay muted></video>\n               </div>\n          )\n     }\n}\n\nexport default Watch;"]},"metadata":{},"sourceType":"module"}