{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js\";\nimport React from \"react\";\nimport './styles/home.style.css';\nimport io from 'socket.io-client';\nimport configs from '../config';\nimport NavBar from \"../components/navbar.component\";\nimport authService from \"../services/auth.service\";\nimport ChatContainer from \"../components/chat.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Watch extends React.Component {\n  constructor(props) {\n    super(props); // check if user did not sign in\n\n    this.CommitMessage = message => {\n      this.state.socket.emit(\"chat\", message, this.state.user.name, this.props.broadcasterId);\n    };\n\n    let user = authService.getCurrentUser();\n    this.state = {\n      user: JSON.parse(user),\n      socket: io(`${configs.API_URL}`),\n      messageList: []\n    };\n  }\n\n  componentDidMount() {\n    // locate broadcaster id\n    let broadcasterId = this.props.broadcasterId; // peer connection to broadcaster\n\n    let peerConnection;\n    const video = document.getElementById(\"camera\"); // socket handler\n\n    this.state.socket.on(\"offer\", (id, description) => {\n      peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n      peerConnection.setRemoteDescription(description).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        this.state.socket.emit(\"answer\", id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = event => {\n        video.srcObject = event.streams[0];\n      };\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          this.state.socket.emit(\"candidate\", id, event.candidate);\n        }\n      };\n    });\n    this.state.socket.on(\"candidate\", (id, candidate) => {\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(e => console.error(e));\n    });\n    this.state.socket.on(\"connect\", () => {\n      this.state.socket.emit(\"start-watching\", broadcasterId);\n    });\n    this.state.socket.on(\"chat\", (watcherName, message) => {\n      console.log(watcherName + \": \" + message); // this.setState({\n      //      messageList: [...this.state.messageList, {\n      //           time: new Date(),\n      //           message: message,\n      //           user: watcherName\n      //      }]\n      // })\n    });\n    this.state.socket.on(\"broadcaster\", () => {\n      this.state.socket.emit(\"watcher\");\n    });\n\n    window.onunload = window.beforeunload = () => {\n      this.state.socket.close();\n      peerConnection.close();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        user: this.state.user,\n        history: this.props.history,\n        isStreaming: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          margin: '0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stream-screen\",\n          className: \"col-md-9\",\n          style: {\n            textAlign: 'center',\n            backgroundColor: 'black',\n            margin: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            id: \"camera\",\n            playsInline: true,\n            autoPlay: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-3\",\n          style: {\n            margin: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n            currentUser: this.state.user.name,\n            messageList: this.state.messageList,\n            commitMessage: this.CommitMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Watch;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js"],"names":["React","io","configs","NavBar","authService","ChatContainer","Watch","Component","constructor","props","CommitMessage","message","state","socket","emit","user","name","broadcasterId","getCurrentUser","JSON","parse","API_URL","messageList","componentDidMount","peerConnection","video","document","getElementById","on","id","description","RTCPeerConnection","STUN_CONFIG","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","localDescription","ontrack","event","srcObject","streams","onicecandidate","candidate","addIceCandidate","RTCIceCandidate","catch","e","console","error","watcherName","log","window","onunload","beforeunload","close","render","history","margin","textAlign","backgroundColor"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport './styles/home.style.css'\nimport io from 'socket.io-client'\nimport configs from '../config'\nimport NavBar from \"../components/navbar.component\";\nimport authService from \"../services/auth.service\";\nimport ChatContainer from \"../components/chat.component\";\n\nclass Watch extends React.Component {\n\n     constructor(props) {\n          super(props)\n\n          // check if user did not sign in\n          let user = authService.getCurrentUser();\n\n          this.state = {\n               user: JSON.parse(user),\n               socket: io(`${configs.API_URL}`),\n               messageList: []\n          }\n     }\n\n     componentDidMount() {\n          // locate broadcaster id\n          let broadcasterId = this.props.broadcasterId\n\n          // peer connection to broadcaster\n          let peerConnection;\n\n          const video = document.getElementById(\"camera\");\n\n          // socket handler\n          this.state.socket.on(\"offer\", (id, description) => {\n               peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n               peerConnection\n                    .setRemoteDescription(description)\n                    .then(() => peerConnection.createAnswer())\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\n                    .then(() => {\n                         this.state.socket.emit(\"answer\", id, peerConnection.localDescription);\n                    });\n               peerConnection.ontrack = event => {\n                    video.srcObject = event.streams[0];\n               };\n               peerConnection.onicecandidate = event => {\n                    if (event.candidate) {\n                         this.state.socket.emit(\"candidate\", id, event.candidate);\n                    }\n               };\n          });\n\n          this.state.socket.on(\"candidate\", (id, candidate) => {\n               peerConnection\n                    .addIceCandidate(new RTCIceCandidate(candidate))\n                    .catch(e => console.error(e));\n          });\n\n          this.state.socket.on(\"connect\", () => {\n               this.state.socket.emit(\"start-watching\", broadcasterId);\n          });\n\n          this.state.socket.on(\"chat\", (watcherName, message) => {\n               console.log(watcherName + \": \" + message)\n               // this.setState({\n               //      messageList: [...this.state.messageList, {\n               //           time: new Date(),\n               //           message: message,\n               //           user: watcherName\n               //      }]\n               // })\n          });\n\n          this.state.socket.on(\"broadcaster\", () => {\n               this.state.socket.emit(\"watcher\");\n          });\n\n          window.onunload = window.beforeunload = () => {\n               this.state.socket.close();\n               peerConnection.close();\n          };\n\n     }\n\n     CommitMessage = (message) => {\n          this.state.socket.emit(\"chat\", message, this.state.user.name, this.props.broadcasterId)\n     }\n\n     render() {\n          return (\n               <div>\n                    <NavBar user={this.state.user} history={this.props.history} isStreaming={false} />\n                    <div className='row' style={{ margin: '0' }}>\n                         <div id='stream-screen' className=\"col-md-9\" style={{ textAlign: 'center', backgroundColor: 'black', margin: '0' }}>\n                              <video id='camera' playsInline autoPlay muted></video>\n                         </div>\n                         <div className=\"col-md-3\" style={{ margin: '0' }}>\n                              <ChatContainer currentUser={this.state.user.name} messageList={this.state.messageList} commitMessage={this.CommitMessage} />\n                         </div>\n                    </div>\n               </div>\n          )\n     }\n}\n\nexport default Watch;"]},"metadata":{},"sourceType":"module"}