{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js\";\nimport React from \"react\";\nimport '../styles/home.style.css';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Watch extends React.Component {\n  // constructor(){\n  //      super()\n  // }\n  componentDidMount() {\n    let peerConnection;\n    const config = {\n      iceServers: [{\n        urls: [\"stun:stun.l.google.com:19302\"]\n      }]\n    };\n    const socket = io('localhost:5000');\n    const video = document.querySelector(\"video\");\n    console.log(123);\n    socket.on(\"offer\", (id, description) => {\n      peerConnection = new RTCPeerConnection(config);\n      peerConnection.setRemoteDescription(description).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        socket.emit(\"answer\", id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = function ({\n        streams: [stream]\n      }) {\n        video.srcObject = stream;\n      };\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(\"candidate\", id, event.candidate);\n        }\n      };\n    });\n    socket.on(\"candidate\", (id, candidate) => {\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(e => console.error(e));\n    });\n    socket.on(\"connect\", () => {\n      socket.emit(\"watcher\");\n    });\n    socket.on(\"broadcaster\", () => {\n      socket.emit(\"watcher\");\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      socket.close();\n      peerConnection.close();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      playsInline: true,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Watch;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js"],"names":["React","io","Watch","Component","componentDidMount","peerConnection","config","iceServers","urls","socket","video","document","querySelector","console","log","on","id","description","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","streams","stream","srcObject","onicecandidate","event","candidate","addIceCandidate","RTCIceCandidate","catch","e","error","window","onunload","onbeforeunload","close","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAC/B;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AACf,QAAIC,cAAJ;AACA,UAAMC,MAAM,GAAG;AACVC,MAAAA,UAAU,EAAE,CACP;AACKC,QAAAA,IAAI,EAAE,CAAC,8BAAD;AADX,OADO;AADF,KAAf;AAQA,UAAMC,MAAM,GAAGR,EAAE,CAAC,gBAAD,CAAjB;AACA,UAAMS,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACAL,IAAAA,MAAM,CAACM,EAAP,CAAU,OAAV,EAAmB,CAACC,EAAD,EAAKC,WAAL,KAAqB;AACnCZ,MAAAA,cAAc,GAAG,IAAIa,iBAAJ,CAAsBZ,MAAtB,CAAjB;AACAD,MAAAA,cAAc,CACRc,oBADN,CAC2BF,WAD3B,EAEMG,IAFN,CAEW,MAAMf,cAAc,CAACgB,YAAf,EAFjB,EAGMD,IAHN,CAGWE,GAAG,IAAIjB,cAAc,CAACkB,mBAAf,CAAmCD,GAAnC,CAHlB,EAIMF,IAJN,CAIW,MAAM;AACPX,QAAAA,MAAM,CAACe,IAAP,CAAY,QAAZ,EAAsBR,EAAtB,EAA0BX,cAAc,CAACoB,gBAAzC;AACJ,OANN;;AAOApB,MAAAA,cAAc,CAACqB,OAAf,GAAyB,UAAU;AAAEC,QAAAA,OAAO,EAAE,CAACC,MAAD;AAAX,OAAV,EAAiC;AACrDlB,QAAAA,KAAK,CAACmB,SAAN,GAAkBD,MAAlB;AACJ,OAFD;;AAGAvB,MAAAA,cAAc,CAACyB,cAAf,GAAgCC,KAAK,IAAI;AACpC,YAAIA,KAAK,CAACC,SAAV,EAAqB;AAChBvB,UAAAA,MAAM,CAACe,IAAP,CAAY,WAAZ,EAAyBR,EAAzB,EAA6Be,KAAK,CAACC,SAAnC;AACJ;AACL,OAJD;AAKJ,KAjBD;AAmBAvB,IAAAA,MAAM,CAACM,EAAP,CAAU,WAAV,EAAuB,CAACC,EAAD,EAAKgB,SAAL,KAAmB;AACrC3B,MAAAA,cAAc,CACR4B,eADN,CACsB,IAAIC,eAAJ,CAAoBF,SAApB,CADtB,EAEMG,KAFN,CAEYC,CAAC,IAAIvB,OAAO,CAACwB,KAAR,CAAcD,CAAd,CAFjB;AAGJ,KAJD;AAMA3B,IAAAA,MAAM,CAACM,EAAP,CAAU,SAAV,EAAqB,MAAM;AACtBN,MAAAA,MAAM,CAACe,IAAP,CAAY,SAAZ;AACJ,KAFD;AAIAf,IAAAA,MAAM,CAACM,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC1BN,MAAAA,MAAM,CAACe,IAAP,CAAY,SAAZ;AACJ,KAFD;;AAIAc,IAAAA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACE,cAAP,GAAwB,MAAM;AAC3C/B,MAAAA,MAAM,CAACgC,KAAP;AACApC,MAAAA,cAAc,CAACoC,KAAf;AACJ,KAHD;AAKJ;;AAEDC,EAAAA,MAAM,GAAG;AACJ,wBACK;AAAO,MAAA,WAAW,MAAlB;AAAmB,MAAA,QAAQ;AAA3B;AAAA;AAAA;AAAA;AAAA,YADL;AAGJ;;AA/D8B;;AAkEpC,eAAexC,KAAf","sourcesContent":["import React from \"react\";\nimport '../styles/home.style.css'\nimport io from 'socket.io-client'\n\nclass Watch extends React.Component {\n     // constructor(){\n     //      super()\n     // }\n\n     componentDidMount() {\n          let peerConnection;\n          const config = {\n               iceServers: [\n                    {\n                         urls: [\"stun:stun.l.google.com:19302\"]\n                    }\n               ]\n          };\n\n          const socket = io('localhost:5000');\n          const video = document.querySelector(\"video\");\n\n          console.log(123)\n          socket.on(\"offer\", (id, description) => {\n               peerConnection = new RTCPeerConnection(config);\n               peerConnection\n                    .setRemoteDescription(description)\n                    .then(() => peerConnection.createAnswer())\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\n                    .then(() => {\n                         socket.emit(\"answer\", id, peerConnection.localDescription);\n                    });\n               peerConnection.ontrack = function ({ streams: [stream] }) {\n                    video.srcObject = stream;\n               };\n               peerConnection.onicecandidate = event => {\n                    if (event.candidate) {\n                         socket.emit(\"candidate\", id, event.candidate);\n                    }\n               };\n          });\n\n          socket.on(\"candidate\", (id, candidate) => {\n               peerConnection\n                    .addIceCandidate(new RTCIceCandidate(candidate))\n                    .catch(e => console.error(e));\n          });\n\n          socket.on(\"connect\", () => {\n               socket.emit(\"watcher\");\n          });\n\n          socket.on(\"broadcaster\", () => {\n               socket.emit(\"watcher\");\n          });\n\n          window.onunload = window.onbeforeunload = () => {\n               socket.close();\n               peerConnection.close();\n          };\n\n     }\n\n     render() {\n          return (\n               <video playsInline autoPlay></video>\n          )\n     }\n}\n\nexport default Watch;"]},"metadata":{},"sourceType":"module"}