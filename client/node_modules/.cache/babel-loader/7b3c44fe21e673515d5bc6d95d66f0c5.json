{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js\";\nimport React from \"react\";\nimport '../styles/home.style.css';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Watch extends React.Component {\n  componentDidMount() {\n    let peerConnection;\n    const config = {\n      iceServers: [{\n        urls: [\"stun:stun.l.google.com:19302\"]\n      }]\n    }; // const socket = io('localhost:5000');\n\n    const socket = io('192.168.1.6:5000');\n    const video = document.querySelector(\"video\");\n    socket.on(\"offer\", (id, description) => {\n      console.log('offer');\n      peerConnection = new RTCPeerConnection(config);\n      peerConnection.setRemoteDescription(description).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        socket.emit(\"answer\", id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = event => {\n        video.srcObject = event.streams[0];\n      };\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(\"candidate\", id, event.candidate);\n        }\n      };\n    });\n    socket.on(\"candidate\", (id, candidate) => {\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(e => console.error(e));\n    });\n    socket.on(\"connect\", () => {\n      socket.emit(\"watcher\");\n    });\n    socket.on(\"broadcaster\", () => {\n      socket.emit(\"watcher\");\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      socket.close();\n      peerConnection.close();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"video\", {\n      playsInline: true,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Watch;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/watch.page.js"],"names":["React","io","Watch","Component","componentDidMount","peerConnection","config","iceServers","urls","socket","video","document","querySelector","on","id","description","console","log","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","event","srcObject","streams","onicecandidate","candidate","addIceCandidate","RTCIceCandidate","catch","e","error","window","onunload","onbeforeunload","close","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,0BAAP;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAC/BC,EAAAA,iBAAiB,GAAG;AACf,QAAIC,cAAJ;AACA,UAAMC,MAAM,GAAG;AACVC,MAAAA,UAAU,EAAE,CACP;AACKC,QAAAA,IAAI,EAAE,CAAC,8BAAD;AADX,OADO;AADF,KAAf,CAFe,CAUf;;AACA,UAAMC,MAAM,GAAGR,EAAE,CAAC,kBAAD,CAAjB;AACA,UAAMS,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AAEAH,IAAAA,MAAM,CAACI,EAAP,CAAU,OAAV,EAAmB,CAACC,EAAD,EAAKC,WAAL,KAAqB;AACnCC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAZ,MAAAA,cAAc,GAAG,IAAIa,iBAAJ,CAAsBZ,MAAtB,CAAjB;AACAD,MAAAA,cAAc,CACRc,oBADN,CAC2BJ,WAD3B,EAEMK,IAFN,CAEW,MAAMf,cAAc,CAACgB,YAAf,EAFjB,EAGMD,IAHN,CAGWE,GAAG,IAAIjB,cAAc,CAACkB,mBAAf,CAAmCD,GAAnC,CAHlB,EAIMF,IAJN,CAIW,MAAM;AACPX,QAAAA,MAAM,CAACe,IAAP,CAAY,QAAZ,EAAsBV,EAAtB,EAA0BT,cAAc,CAACoB,gBAAzC;AACJ,OANN;;AAOApB,MAAAA,cAAc,CAACqB,OAAf,GAAyBC,KAAK,IAAI;AAC7BjB,QAAAA,KAAK,CAACkB,SAAN,GAAkBD,KAAK,CAACE,OAAN,CAAc,CAAd,CAAlB;AACJ,OAFD;;AAGAxB,MAAAA,cAAc,CAACyB,cAAf,GAAgCH,KAAK,IAAI;AACpC,YAAIA,KAAK,CAACI,SAAV,EAAqB;AAChBtB,UAAAA,MAAM,CAACe,IAAP,CAAY,WAAZ,EAAyBV,EAAzB,EAA6Ba,KAAK,CAACI,SAAnC;AACJ;AACL,OAJD;AAKJ,KAlBD;AAoBAtB,IAAAA,MAAM,CAACI,EAAP,CAAU,WAAV,EAAuB,CAACC,EAAD,EAAKiB,SAAL,KAAmB;AACrC1B,MAAAA,cAAc,CACR2B,eADN,CACsB,IAAIC,eAAJ,CAAoBF,SAApB,CADtB,EAEMG,KAFN,CAEYC,CAAC,IAAInB,OAAO,CAACoB,KAAR,CAAcD,CAAd,CAFjB;AAGJ,KAJD;AAMA1B,IAAAA,MAAM,CAACI,EAAP,CAAU,SAAV,EAAqB,MAAM;AACtBJ,MAAAA,MAAM,CAACe,IAAP,CAAY,SAAZ;AACJ,KAFD;AAIAf,IAAAA,MAAM,CAACI,EAAP,CAAU,aAAV,EAAyB,MAAM;AAC1BJ,MAAAA,MAAM,CAACe,IAAP,CAAY,SAAZ;AACJ,KAFD;;AAIAa,IAAAA,MAAM,CAACC,QAAP,GAAkBD,MAAM,CAACE,cAAP,GAAwB,MAAM;AAC3C9B,MAAAA,MAAM,CAAC+B,KAAP;AACAnC,MAAAA,cAAc,CAACmC,KAAf;AACJ,KAHD;AAKJ;;AAEDC,EAAAA,MAAM,GAAG;AACJ,wBACK;AAAO,MAAA,WAAW,MAAlB;AAAmB,MAAA,QAAQ;AAA3B;AAAA;AAAA;AAAA;AAAA,YADL;AAGJ;;AA5D8B;;AA+DpC,eAAevC,KAAf","sourcesContent":["import React from \"react\";\nimport '../styles/home.style.css'\nimport io from 'socket.io-client'\n\nclass Watch extends React.Component {\n     componentDidMount() {\n          let peerConnection;\n          const config = {\n               iceServers: [\n                    {\n                         urls: [\"stun:stun.l.google.com:19302\"]\n                    }\n               ]\n          };\n\n          // const socket = io('localhost:5000');\n          const socket = io('192.168.1.6:5000');\n          const video = document.querySelector(\"video\");\n\n          socket.on(\"offer\", (id, description) => {\n               console.log('offer')\n               peerConnection = new RTCPeerConnection(config);\n               peerConnection\n                    .setRemoteDescription(description)\n                    .then(() => peerConnection.createAnswer())\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\n                    .then(() => {\n                         socket.emit(\"answer\", id, peerConnection.localDescription);\n                    });\n               peerConnection.ontrack = event => {\n                    video.srcObject = event.streams[0];\n               };\n               peerConnection.onicecandidate = event => {\n                    if (event.candidate) {\n                         socket.emit(\"candidate\", id, event.candidate);\n                    }\n               };\n          });\n\n          socket.on(\"candidate\", (id, candidate) => {\n               peerConnection\n                    .addIceCandidate(new RTCIceCandidate(candidate))\n                    .catch(e => console.error(e));\n          });\n\n          socket.on(\"connect\", () => {\n               socket.emit(\"watcher\");\n          });\n\n          socket.on(\"broadcaster\", () => {\n               socket.emit(\"watcher\");\n          });\n\n          window.onunload = window.onbeforeunload = () => {\n               socket.close();\n               peerConnection.close();\n          };\n\n     }\n\n     render() {\n          return (\n               <video playsInline autoPlay></video>\n          )\n     }\n}\n\nexport default Watch;"]},"metadata":{},"sourceType":"module"}