{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport './styles/broadcaster.style.css';\nimport configs from '../config';\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\nimport ChatContainer from \"../components/chat.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor() {\n    super(); // check if user did not sign in\n\n    this.CommitMessage = message => {\n      this.state.socket.emit(\"chat\", message, this.state.user.name, this.state.socket.id);\n      this.setState({\n        messageList: [...this.state.messageList, {\n          time: new Date(),\n          message: message,\n          user: this.state.user.name\n        }]\n      });\n    };\n\n    this.SwitchShare = () => {\n      if (this.state.shareMode === 0) {\n        // using camera\n        // Use screen\n        navigator.mediaDevices.getDisplayMedia(configs.VIDEO_CONSTRAINS).then(stream => {\n          document.querySelector(\"video\").srcObject = stream;\n        }).catch(error => console.error(error));\n      } else {\n        // Use camera\n        navigator.mediaDevices.getUserMedia(configs.VIDEO_CONSTRAINS).then(stream => {\n          document.querySelector(\"video\").srcObject = stream;\n        }).catch(error => console.error(error));\n      }\n\n      let stream = document.querySelector(\"video\").srcObject;\n\n      for (const [key, peer] of Object.entries(this.state.peerConnections)) {\n        peer.getSenders().forEach(rtpSender => {\n          if (rtpSender.track.kind === 'video') {\n            rtpSender.replaceTrack(stream.getVideoTracks()[0]).then(function () {\n              console.log(\"Replaced video track from camera to screen\");\n            }).catch(function (error) {\n              console.log(\"Could not replace video track: \" + error);\n            });\n          }\n        });\n      }\n\n      this.setState({\n        shareMode: 1 - this.state.shareMode\n      });\n    };\n\n    let user = authService.getCurrentUser();\n\n    if (!user) {\n      this.props.history.push('/login');\n      window.location.reload();\n    }\n\n    this.state = {\n      // client list\n      peerConnections: {},\n      // socket connection\n      socket: io(`${configs.API_URL}`),\n      user: JSON.parse(user),\n      messageList: [],\n      password: '',\n      cameraSource: null,\n      screenSource: null,\n      shareMode: 0 // 0 => camera, 1 => screen\n\n    };\n  }\n\n  componentDidMount() {\n    // Use camera\n    navigator.mediaDevices.getUserMedia(configs.VIDEO_CONSTRAINS).then(stream => {\n      this.setState({\n        cameraSource: stream\n      });\n      this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n    }).catch(error => console.error(error));\n    document.querySelector(\"video\").srcObject = this.state.cameraSource; // Use screen\n    // navigator.mediaDevices\n    //     .getDisplayMedia(configs.VIDEO_CONSTRAINS)\n    //     .then(stream => {\n    //         // document.querySelector(\"video\").srcObject = stream;\n    //         this.state.screenStream = stream;\n    //         this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n    //     })\n    //     .catch(error => console.error(error));\n    // Socket handler\n\n    this.state.socket.on(\"start-watching\", clientId => {\n      const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG); // update state\n\n      this.setState(prevState => {\n        let newPeerConnections = prevState.peerConnections;\n        newPeerConnections[clientId] = peerConnection;\n        return {\n          socket: this.state.socket,\n          peerConnections: newPeerConnections\n        };\n      });\n      let stream = document.querySelector(\"video\").srcObject;\n      stream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, stream);\n      });\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          this.state.socket.emit(\"candidate\", clientId, event.candidate);\n        }\n      };\n\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n      });\n    });\n    this.state.socket.on(\"password\", password => {\n      console.log(password);\n      this.setState({\n        password: password\n      });\n    });\n    this.state.socket.on(\"answer\", (id, description) => {\n      this.state.peerConnections[id].setRemoteDescription(description);\n    });\n    this.state.socket.on(\"candidate\", (id, candidate) => {\n      this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    this.state.socket.on(\"chat\", (watcherName, message) => {\n      this.setState({\n        messageList: [...this.state.messageList, {\n          time: new Date(),\n          message: message,\n          user: watcherName\n        }]\n      });\n    });\n    this.state.socket.on(\"disconnectPeer\", id => {\n      this.state.peerConnections[id].close();\n      delete this.state.peerConnections[id];\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      this.state.socket.close();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        password: this.state.password,\n        user: this.state.user,\n        history: this.props.history,\n        isStreaming: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.SwitchShare,\n        children: \"Switch share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          margin: '0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stream-screen\",\n          className: \"col-md-9\",\n          style: {\n            textAlign: 'center',\n            backgroundColor: 'black',\n            margin: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            id: \"camera\",\n            playsInline: true,\n            autoPlay: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-3\",\n          style: {\n            margin: '0',\n            padding: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n            currentUser: this.state.user.name,\n            messageList: this.state.messageList,\n            commitMessage: this.CommitMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","configs","authService","NavBar","ChatContainer","BroadCaster","Component","constructor","CommitMessage","message","state","socket","emit","user","name","id","setState","messageList","time","Date","SwitchShare","shareMode","navigator","mediaDevices","getDisplayMedia","VIDEO_CONSTRAINS","then","stream","document","querySelector","srcObject","catch","error","console","getUserMedia","key","peer","Object","entries","peerConnections","getSenders","forEach","rtpSender","track","kind","replaceTrack","getVideoTracks","log","getCurrentUser","props","history","push","window","location","reload","API_URL","JSON","parse","password","cameraSource","screenSource","componentDidMount","mode","on","clientId","peerConnection","RTCPeerConnection","STUN_CONFIG","prevState","newPeerConnections","getTracks","addTrack","onicecandidate","event","candidate","createOffer","sdp","setLocalDescription","localDescription","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","watcherName","close","onunload","onbeforeunload","render","margin","textAlign","backgroundColor","padding"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport './styles/broadcaster.style.css'\nimport configs from '../config'\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\nimport ChatContainer from \"../components/chat.component\";\n\nclass BroadCaster extends React.Component {\n    constructor() {\n        super()\n\n        // check if user did not sign in\n        let user = authService.getCurrentUser();\n        if (!user) {\n            this.props.history.push('/login')\n            window.location.reload()\n        }\n\n        this.state = {\n            // client list\n            peerConnections: {},\n            // socket connection\n            socket: io(`${configs.API_URL}`),\n            user: JSON.parse(user),\n            messageList: [],\n            password: '',\n            cameraSource: null,\n            screenSource: null,\n            shareMode: 0 // 0 => camera, 1 => screen\n        }\n    }\n\n    componentDidMount() {\n        // Use camera\n        navigator.mediaDevices\n            .getUserMedia(configs.VIDEO_CONSTRAINS)\n            .then(stream => {\n                this.setState({\n                    cameraSource: stream\n                })\n                this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n            })\n            .catch(error => console.error(error));\n\n        document.querySelector(\"video\").srcObject = this.state.cameraSource;\n\n        // Use screen\n        // navigator.mediaDevices\n        //     .getDisplayMedia(configs.VIDEO_CONSTRAINS)\n        //     .then(stream => {\n        //         // document.querySelector(\"video\").srcObject = stream;\n        //         this.state.screenStream = stream;\n        //         this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n        //     })\n        //     .catch(error => console.error(error));\n\n        // Socket handler\n        this.state.socket.on(\"start-watching\", clientId => {\n            const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n\n            // update state\n            this.setState(prevState => {\n                let newPeerConnections = prevState.peerConnections\n                newPeerConnections[clientId] = peerConnection\n                return {\n                    socket: this.state.socket,\n                    peerConnections: newPeerConnections\n                }\n            })\n\n            let stream = document.querySelector(\"video\").srcObject;\n            stream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, stream)\n            });\n\n            peerConnection.onicecandidate = event => {\n                if (event.candidate) {\n                    this.state.socket.emit(\"candidate\", clientId, event.candidate);\n                }\n            };\n\n            peerConnection\n                .createOffer()\n                .then(sdp => peerConnection.setLocalDescription(sdp))\n                .then(() => {\n                    this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n                });\n        });\n\n        this.state.socket.on(\"password\", (password) => {\n            console.log(password)\n            this.setState({\n                password: password\n            })\n        });\n\n        this.state.socket.on(\"answer\", (id, description) => {\n            this.state.peerConnections[id].setRemoteDescription(description);\n        });\n\n        this.state.socket.on(\"candidate\", (id, candidate) => {\n            this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        this.state.socket.on(\"chat\", (watcherName, message) => {\n            this.setState({\n                messageList: [...this.state.messageList, {\n                    time: new Date(),\n                    message: message,\n                    user: watcherName\n                }]\n            })\n        });\n\n        this.state.socket.on(\"disconnectPeer\", id => {\n            this.state.peerConnections[id].close();\n            delete this.state.peerConnections[id];\n        });\n\n        window.onunload = window.onbeforeunload = () => {\n            this.state.socket.close();\n        };\n    }\n\n    CommitMessage = (message) => {\n        this.state.socket.emit(\"chat\", message, this.state.user.name, this.state.socket.id)\n        this.setState({\n            messageList: [...this.state.messageList, {\n                time: new Date(),\n                message: message,\n                user: this.state.user.name\n            }]\n        })\n    }\n\n    SwitchShare = () => {\n        if (this.state.shareMode === 0) { // using camera\n            // Use screen\n            navigator.mediaDevices\n                .getDisplayMedia(configs.VIDEO_CONSTRAINS)\n                .then(stream => {\n                    document.querySelector(\"video\").srcObject = stream;\n                })\n                .catch(error => console.error(error));\n        }\n        else {\n\n            // Use camera\n            navigator.mediaDevices\n                .getUserMedia(configs.VIDEO_CONSTRAINS)\n                .then(stream => {\n                    document.querySelector(\"video\").srcObject = stream;\n                })\n                .catch(error => console.error(error));\n        }\n\n        let stream = document.querySelector(\"video\").srcObject;\n        for (const [key, peer] of Object.entries(this.state.peerConnections)) {\n            peer.getSenders().forEach(rtpSender => {\n                if (rtpSender.track.kind === 'video') {\n                    rtpSender.replaceTrack(stream.getVideoTracks()[0]).then(function () {\n                        console.log(\"Replaced video track from camera to screen\");\n                    }).catch(function (error) {\n                        console.log(\"Could not replace video track: \" + error);\n                    });\n                }\n            });\n        }\n\n        this.setState({\n            shareMode: 1 - this.state.shareMode\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar password={this.state.password} user={this.state.user} history={this.props.history} isStreaming={true} />\n                <button type='button' onClick={this.SwitchShare}>Switch share</button>\n                <div className='row' style={{ margin: '0' }}>\n                    <div id='stream-screen' className=\"col-md-9\" style={{ textAlign: 'center', backgroundColor: 'black', margin: '0' }}>\n                        <video id='camera' playsInline autoPlay muted></video>\n                    </div>\n                    <div className=\"col-md-3\" style={{ margin: '0', padding: '0' }}>\n                        <ChatContainer currentUser={this.state.user.name} messageList={this.state.messageList} commitMessage={this.CommitMessage} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}