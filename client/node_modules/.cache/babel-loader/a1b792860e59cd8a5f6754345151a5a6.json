{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/home.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport '../styles/home.style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.StopStreaming = () => {\n      alert(123);\n    };\n\n    this.StartStream = () => {\n      this.SocketConnection();\n    };\n  }\n\n  SocketConnection() {\n    // === socket handler ===\n    const peerConnections = {};\n    const config = {\n      iceServers: [{\n        urls: [\"stun:stun.l.google.com:19302\"]\n      }]\n    };\n    const socket = io('localhost:5000');\n    const video = document.querySelector(\"video\"); // Media contrains\n\n    const constraints = {\n      video: true,\n      audio: true\n    };\n    navigator.getUserMedia(constraints, stream => {\n      video.srcObject = stream;\n      socket.emit(\"broadcaster\");\n    }, err => console.error(err));\n    socket.on(\"watcher\", id => {\n      const peerConnection = new RTCPeerConnection(config);\n      peerConnections[id] = peerConnection;\n      let stream = video.srcObject;\n      stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(\"candidate\", id, event.candidate);\n        }\n      };\n\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        socket.emit(\"offer\", id, peerConnection.localDescription);\n      });\n    });\n    socket.on(\"answer\", (id, description) => {\n      peerConnections[id].setRemoteDescription(description);\n    });\n    socket.on(\"candidate\", (id, candidate) => {\n      peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    socket.on(\"disconnectPeer\", id => {\n      peerConnections[id].close();\n      delete peerConnections[id];\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      socket.close();\n    };\n  } // Stop streamming\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Streamer online\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"User: hoangnd\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"control-btn\",\n          onClick: this.StartStream,\n          children: \"Start streaming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stream-screen\",\n          style: {\n            margin: '20px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            playsInline: true,\n            autoPlay: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/home.page.js"],"names":["React","io","Home","Component","StopStreaming","alert","StartStream","SocketConnection","peerConnections","config","iceServers","urls","socket","video","document","querySelector","constraints","audio","navigator","getUserMedia","stream","srcObject","emit","err","console","error","on","id","peerConnection","RTCPeerConnection","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","createOffer","then","sdp","setLocalDescription","localDescription","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","close","window","onunload","onbeforeunload","render","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport '../styles/home.style.css'\n\nclass Home extends React.Component {\n\n     SocketConnection() {\n          // === socket handler ===\n          const peerConnections = {};\n          const config = {\n               iceServers: [\n                    {\n                         urls: [\"stun:stun.l.google.com:19302\"]\n                    }\n               ]\n          };\n\n          const socket = io('localhost:5000');\n          const video = document.querySelector(\"video\");\n\n          // Media contrains\n          const constraints = {\n               video: true,\n               audio: true,\n          };\n\n          navigator.getUserMedia(constraints, stream => {\n               video.srcObject = stream;\n               socket.emit(\"broadcaster\");\n          }, err => console.error(err))\n\n          socket.on(\"watcher\", id => {\n               const peerConnection = new RTCPeerConnection(config);\n               peerConnections[id] = peerConnection;\n\n               let stream = video.srcObject;\n               stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\n\n               peerConnection.onicecandidate = event => {\n                    if (event.candidate) {\n                         socket.emit(\"candidate\", id, event.candidate);\n                    }\n               };\n\n               peerConnection\n                    .createOffer()\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\n                    .then(() => {\n                         socket.emit(\"offer\", id, peerConnection.localDescription);\n                    });\n          });\n\n          socket.on(\"answer\", (id, description) => {\n               peerConnections[id].setRemoteDescription(description);\n          });\n\n          socket.on(\"candidate\", (id, candidate) => {\n               peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n          });\n\n          socket.on(\"disconnectPeer\", id => {\n               peerConnections[id].close();\n               delete peerConnections[id];\n          });\n\n          window.onunload = window.onbeforeunload = () => {\n               socket.close();\n          };\n     }\n\n     // Stop streamming\n     StopStreaming = () => {\n          alert(123)\n     }\n\n     // Start streaming\n     StartStream = () => {\n          this.SocketConnection();\n\n     }\n\n     render() {\n          return (\n               <div>\n                    <h1>Streamer online</h1>\n                    <ul>\n\n                    </ul>\n                    <hr></hr>\n                    <div>\n                         User: hoangnd&nbsp;\n                    <button id='control-btn' onClick={this.StartStream}>Start streaming</button>\n                         <div id='stream-screen' style={{ margin: '20px' }}>\n                              <video playsInline autoPlay muted></video>\n                         </div>\n                    </div>\n               </div>\n          )\n     }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}