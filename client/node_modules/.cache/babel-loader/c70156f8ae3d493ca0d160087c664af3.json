{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport './styles/broadcaster.style.css';\nimport configs from '../config';\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\nimport ChatContainer from \"../components/chat.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor() {\n    super(); // check if user did not sign in\n\n    this.CommitMessage = message => {\n      this.state.socket.emit(\"chat\", message, this.state.user.name, this.state.socket.id);\n      this.setState({\n        messageList: [...this.state.messageList, {\n          time: new Date(),\n          message: message,\n          user: this.state.user.name\n        }]\n      });\n    };\n\n    this.SwitchShare = () => {\n      if (this.state.shareMode == 0) {\n        // using camera\n        this.setState({\n          shareMode: 1\n        });\n      } else {}\n    };\n\n    let user = authService.getCurrentUser();\n\n    if (!user) {\n      this.props.history.push('/login');\n      window.location.reload();\n    }\n\n    this.state = {\n      // client list\n      peerConnections: {},\n      // socket connection\n      socket: io(`${configs.API_URL}`),\n      user: JSON.parse(user),\n      messageList: [],\n      password: '',\n      shareMode: 0 // 0 => camera, 1 => screen\n\n    };\n  }\n\n  componentDidMount() {\n    const video = document.querySelector(\"video\"); // Use camera\n\n    navigator.mediaDevices.getUserMedia(configs.VIDEO_CONSTRAINS).then(stream => {\n      video.srcObject = stream;\n      this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n    }).catch(error => console.error(error)); // Use screen\n    // navigator.mediaDevices\n    //     .getDisplayMedia(configs.VIDEO_CONSTRAINS)\n    //     .then(stream => {\n    //         // video.srcObject = stream;\n    //         this.state.screenStream = stream;\n    //         this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n    //     })\n    //     .catch(error => console.error(error));\n    // Socket handler\n\n    this.state.socket.on(\"start-watching\", clientId => {\n      const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG); // update state\n\n      this.setState(prevState => {\n        let newPeerConnections = prevState.peerConnections;\n        newPeerConnections[clientId] = peerConnection;\n        return {\n          socket: this.state.socket,\n          peerConnections: newPeerConnections\n        };\n      });\n      let stream = video.srcObject;\n      stream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, stream);\n      });\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          this.state.socket.emit(\"candidate\", clientId, event.candidate);\n        }\n      };\n\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n      });\n    });\n    this.state.socket.on(\"password\", password => {\n      console.log(password);\n      this.setState({\n        password: password\n      });\n    });\n    this.state.socket.on(\"answer\", (id, description) => {\n      this.state.peerConnections[id].setRemoteDescription(description);\n    });\n    this.state.socket.on(\"candidate\", (id, candidate) => {\n      this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    this.state.socket.on(\"chat\", (watcherName, message) => {\n      this.setState({\n        messageList: [...this.state.messageList, {\n          time: new Date(),\n          message: message,\n          user: watcherName\n        }]\n      });\n    });\n    this.state.socket.on(\"disconnectPeer\", id => {\n      this.state.peerConnections[id].close();\n      delete this.state.peerConnections[id];\n      console.log(this.state.peerConnections);\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      this.state.socket.close();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        password: this.state.password,\n        user: this.state.user,\n        history: this.props.history,\n        isStreaming: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: this.SwitchShare(),\n        children: \"Switch share\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          margin: '0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stream-screen\",\n          className: \"col-md-9\",\n          style: {\n            textAlign: 'center',\n            backgroundColor: 'black',\n            margin: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            id: \"camera\",\n            playsInline: true,\n            autoPlay: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-3\",\n          style: {\n            margin: '0',\n            padding: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n            currentUser: this.state.user.name,\n            messageList: this.state.messageList,\n            commitMessage: this.CommitMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","configs","authService","NavBar","ChatContainer","BroadCaster","Component","constructor","CommitMessage","message","state","socket","emit","user","name","id","setState","messageList","time","Date","SwitchShare","shareMode","getCurrentUser","props","history","push","window","location","reload","peerConnections","API_URL","JSON","parse","password","componentDidMount","video","document","querySelector","navigator","mediaDevices","getUserMedia","VIDEO_CONSTRAINS","then","stream","srcObject","mode","catch","error","console","on","clientId","peerConnection","RTCPeerConnection","STUN_CONFIG","prevState","newPeerConnections","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","createOffer","sdp","setLocalDescription","localDescription","log","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","watcherName","close","onunload","onbeforeunload","render","margin","textAlign","backgroundColor","padding"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,gCAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;;;AAEA,MAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,GAAG;AACV,YADU,CAGV;;AAHU,SAiHdC,aAjHc,GAiHGC,OAAD,IAAa;AACzB,WAAKC,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,MAAvB,EAA+BH,OAA/B,EAAwC,KAAKC,KAAL,CAAWG,IAAX,CAAgBC,IAAxD,EAA8D,KAAKJ,KAAL,CAAWC,MAAX,CAAkBI,EAAhF;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAE,CAAC,GAAG,KAAKP,KAAL,CAAWO,WAAf,EAA4B;AACrCC,UAAAA,IAAI,EAAE,IAAIC,IAAJ,EAD+B;AAErCV,UAAAA,OAAO,EAAEA,OAF4B;AAGrCI,UAAAA,IAAI,EAAE,KAAKH,KAAL,CAAWG,IAAX,CAAgBC;AAHe,SAA5B;AADH,OAAd;AAOH,KA1Ha;;AAAA,SA4HdM,WA5Hc,GA4HA,MAAM;AAChB,UAAG,KAAKV,KAAL,CAAWW,SAAX,IAAwB,CAA3B,EAA6B;AAAE;AAC3B,aAAKL,QAAL,CAAc;AACVK,UAAAA,SAAS,EAAE;AADD,SAAd;AAGH,OAJD,MAKK,CAEJ;AACJ,KArIa;;AAIV,QAAIR,IAAI,GAAGX,WAAW,CAACoB,cAAZ,EAAX;;AACA,QAAI,CAACT,IAAL,EAAW;AACP,WAAKU,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;;AAED,SAAKlB,KAAL,GAAa;AACT;AACAmB,MAAAA,eAAe,EAAE,EAFR;AAGT;AACAlB,MAAAA,MAAM,EAAEX,EAAE,CAAE,GAAEC,OAAO,CAAC6B,OAAQ,EAApB,CAJD;AAKTjB,MAAAA,IAAI,EAAEkB,IAAI,CAACC,KAAL,CAAWnB,IAAX,CALG;AAMTI,MAAAA,WAAW,EAAE,EANJ;AAOTgB,MAAAA,QAAQ,EAAE,EAPD;AAQTZ,MAAAA,SAAS,EAAE,CARF,CAQI;;AARJ,KAAb;AAUH;;AAEDa,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd,CADgB,CAGhB;;AACAC,IAAAA,SAAS,CAACC,YAAV,CACKC,YADL,CACkBvC,OAAO,CAACwC,gBAD1B,EAEKC,IAFL,CAEUC,MAAM,IAAI;AACZR,MAAAA,KAAK,CAACS,SAAN,GAAkBD,MAAlB;AACA,WAAKjC,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,aAAvB,EAAsC,KAAKF,KAAL,CAAWG,IAAX,CAAgBC,IAAtD,EAA4D,KAAKS,KAAL,CAAWsB,IAAvE;AACH,KALL,EAMKC,KANL,CAMWC,KAAK,IAAIC,OAAO,CAACD,KAAR,CAAcA,KAAd,CANpB,EAJgB,CAYhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,SAAKrC,KAAL,CAAWC,MAAX,CAAkBsC,EAAlB,CAAqB,gBAArB,EAAuCC,QAAQ,IAAI;AAC/C,YAAMC,cAAc,GAAG,IAAIC,iBAAJ,CAAsBnD,OAAO,CAACoD,WAA9B,CAAvB,CAD+C,CAG/C;;AACA,WAAKrC,QAAL,CAAcsC,SAAS,IAAI;AACvB,YAAIC,kBAAkB,GAAGD,SAAS,CAACzB,eAAnC;AACA0B,QAAAA,kBAAkB,CAACL,QAAD,CAAlB,GAA+BC,cAA/B;AACA,eAAO;AACHxC,UAAAA,MAAM,EAAE,KAAKD,KAAL,CAAWC,MADhB;AAEHkB,UAAAA,eAAe,EAAE0B;AAFd,SAAP;AAIH,OAPD;AASA,UAAIZ,MAAM,GAAGR,KAAK,CAACS,SAAnB;AACAD,MAAAA,MAAM,CAACa,SAAP,GAAmBC,OAAnB,CAA2BC,KAAK,IAAI;AAChCP,QAAAA,cAAc,CAACQ,QAAf,CAAwBD,KAAxB,EAA+Bf,MAA/B;AACH,OAFD;;AAIAQ,MAAAA,cAAc,CAACS,cAAf,GAAgCC,KAAK,IAAI;AACrC,YAAIA,KAAK,CAACC,SAAV,EAAqB;AACjB,eAAKpD,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,WAAvB,EAAoCsC,QAApC,EAA8CW,KAAK,CAACC,SAApD;AACH;AACJ,OAJD;;AAMAX,MAAAA,cAAc,CACTY,WADL,GAEKrB,IAFL,CAEUsB,GAAG,IAAIb,cAAc,CAACc,mBAAf,CAAmCD,GAAnC,CAFjB,EAGKtB,IAHL,CAGU,MAAM;AACR,aAAKhC,KAAL,CAAWC,MAAX,CAAkBC,IAAlB,CAAuB,OAAvB,EAAgCsC,QAAhC,EAA0CC,cAAc,CAACe,gBAAzD;AACH,OALL;AAMH,KA9BD;AAgCA,SAAKxD,KAAL,CAAWC,MAAX,CAAkBsC,EAAlB,CAAqB,UAArB,EAAkChB,QAAD,IAAc;AAC3Ce,MAAAA,OAAO,CAACmB,GAAR,CAAYlC,QAAZ;AACA,WAAKjB,QAAL,CAAc;AACViB,QAAAA,QAAQ,EAAEA;AADA,OAAd;AAGH,KALD;AAOA,SAAKvB,KAAL,CAAWC,MAAX,CAAkBsC,EAAlB,CAAqB,QAArB,EAA+B,CAAClC,EAAD,EAAKqD,WAAL,KAAqB;AAChD,WAAK1D,KAAL,CAAWmB,eAAX,CAA2Bd,EAA3B,EAA+BsD,oBAA/B,CAAoDD,WAApD;AACH,KAFD;AAIA,SAAK1D,KAAL,CAAWC,MAAX,CAAkBsC,EAAlB,CAAqB,WAArB,EAAkC,CAAClC,EAAD,EAAK+C,SAAL,KAAmB;AACjD,WAAKpD,KAAL,CAAWmB,eAAX,CAA2Bd,EAA3B,EAA+BuD,eAA/B,CAA+C,IAAIC,eAAJ,CAAoBT,SAApB,CAA/C;AACH,KAFD;AAIA,SAAKpD,KAAL,CAAWC,MAAX,CAAkBsC,EAAlB,CAAqB,MAArB,EAA6B,CAACuB,WAAD,EAAc/D,OAAd,KAA0B;AACnD,WAAKO,QAAL,CAAc;AACVC,QAAAA,WAAW,EAAE,CAAC,GAAG,KAAKP,KAAL,CAAWO,WAAf,EAA4B;AACrCC,UAAAA,IAAI,EAAE,IAAIC,IAAJ,EAD+B;AAErCV,UAAAA,OAAO,EAAEA,OAF4B;AAGrCI,UAAAA,IAAI,EAAE2D;AAH+B,SAA5B;AADH,OAAd;AAOH,KARD;AAUA,SAAK9D,KAAL,CAAWC,MAAX,CAAkBsC,EAAlB,CAAqB,gBAArB,EAAuClC,EAAE,IAAI;AACzC,WAAKL,KAAL,CAAWmB,eAAX,CAA2Bd,EAA3B,EAA+B0D,KAA/B;AACA,aAAO,KAAK/D,KAAL,CAAWmB,eAAX,CAA2Bd,EAA3B,CAAP;AACAiC,MAAAA,OAAO,CAACmB,GAAR,CAAY,KAAKzD,KAAL,CAAWmB,eAAvB;AACH,KAJD;;AAMAH,IAAAA,MAAM,CAACgD,QAAP,GAAkBhD,MAAM,CAACiD,cAAP,GAAwB,MAAM;AAC5C,WAAKjE,KAAL,CAAWC,MAAX,CAAkB8D,KAAlB;AACH,KAFD;AAGH;;AAwBDG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAE,KAAKlE,KAAL,CAAWuB,QAA7B;AAAuC,QAAA,IAAI,EAAE,KAAKvB,KAAL,CAAWG,IAAxD;AAA8D,QAAA,OAAO,EAAE,KAAKU,KAAL,CAAWC,OAAlF;AAA2F,QAAA,WAAW,EAAE;AAAxG;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKJ,WAAL,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,KAAK,EAAE;AAAEyD,UAAAA,MAAM,EAAE;AAAV,SAA5B;AAAA,gCACI;AAAK,UAAA,EAAE,EAAC,eAAR;AAAwB,UAAA,SAAS,EAAC,UAAlC;AAA6C,UAAA,KAAK,EAAE;AAAEC,YAAAA,SAAS,EAAE,QAAb;AAAuBC,YAAAA,eAAe,EAAE,OAAxC;AAAiDF,YAAAA,MAAM,EAAE;AAAzD,WAApD;AAAA,iCACI;AAAO,YAAA,EAAE,EAAC,QAAV;AAAmB,YAAA,WAAW,MAA9B;AAA+B,YAAA,QAAQ,MAAvC;AAAwC,YAAA,KAAK;AAA7C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,KAAK,EAAE;AAAEA,YAAAA,MAAM,EAAE,GAAV;AAAeG,YAAAA,OAAO,EAAE;AAAxB,WAAjC;AAAA,iCACI,QAAC,aAAD;AAAe,YAAA,WAAW,EAAE,KAAKtE,KAAL,CAAWG,IAAX,CAAgBC,IAA5C;AAAkD,YAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWO,WAA1E;AAAuF,YAAA,aAAa,EAAE,KAAKT;AAA3G;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AAvJqC;;AA0J1C,eAAeH,WAAf","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport './styles/broadcaster.style.css'\nimport configs from '../config'\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\nimport ChatContainer from \"../components/chat.component\";\n\nclass BroadCaster extends React.Component {\n    constructor() {\n        super()\n\n        // check if user did not sign in\n        let user = authService.getCurrentUser();\n        if (!user) {\n            this.props.history.push('/login')\n            window.location.reload()\n        }\n\n        this.state = {\n            // client list\n            peerConnections: {},\n            // socket connection\n            socket: io(`${configs.API_URL}`),\n            user: JSON.parse(user),\n            messageList: [],\n            password: '',\n            shareMode: 0 // 0 => camera, 1 => screen\n        }\n    }\n\n    componentDidMount() {\n        const video = document.querySelector(\"video\");\n\n        // Use camera\n        navigator.mediaDevices\n            .getUserMedia(configs.VIDEO_CONSTRAINS)\n            .then(stream => {\n                video.srcObject = stream;\n                this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n            })\n            .catch(error => console.error(error));\n\n        // Use screen\n        // navigator.mediaDevices\n        //     .getDisplayMedia(configs.VIDEO_CONSTRAINS)\n        //     .then(stream => {\n        //         // video.srcObject = stream;\n        //         this.state.screenStream = stream;\n        //         this.state.socket.emit(\"broadcaster\", this.state.user.name, this.props.mode);\n        //     })\n        //     .catch(error => console.error(error));\n\n        // Socket handler\n        this.state.socket.on(\"start-watching\", clientId => {\n            const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n\n            // update state\n            this.setState(prevState => {\n                let newPeerConnections = prevState.peerConnections\n                newPeerConnections[clientId] = peerConnection\n                return {\n                    socket: this.state.socket,\n                    peerConnections: newPeerConnections\n                }\n            })\n\n            let stream = video.srcObject;\n            stream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, stream)\n            });\n\n            peerConnection.onicecandidate = event => {\n                if (event.candidate) {\n                    this.state.socket.emit(\"candidate\", clientId, event.candidate);\n                }\n            };\n\n            peerConnection\n                .createOffer()\n                .then(sdp => peerConnection.setLocalDescription(sdp))\n                .then(() => {\n                    this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n                });\n        });\n\n        this.state.socket.on(\"password\", (password) => {\n            console.log(password)\n            this.setState({\n                password: password\n            })\n        });\n\n        this.state.socket.on(\"answer\", (id, description) => {\n            this.state.peerConnections[id].setRemoteDescription(description);\n        });\n\n        this.state.socket.on(\"candidate\", (id, candidate) => {\n            this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        this.state.socket.on(\"chat\", (watcherName, message) => {\n            this.setState({\n                messageList: [...this.state.messageList, {\n                    time: new Date(),\n                    message: message,\n                    user: watcherName\n                }]\n            })\n        });\n\n        this.state.socket.on(\"disconnectPeer\", id => {\n            this.state.peerConnections[id].close();\n            delete this.state.peerConnections[id];\n            console.log(this.state.peerConnections)\n        });\n\n        window.onunload = window.onbeforeunload = () => {\n            this.state.socket.close();\n        };\n    }\n\n    CommitMessage = (message) => {\n        this.state.socket.emit(\"chat\", message, this.state.user.name, this.state.socket.id)\n        this.setState({\n            messageList: [...this.state.messageList, {\n                time: new Date(),\n                message: message,\n                user: this.state.user.name\n            }]\n        })\n    }\n\n    SwitchShare = () => {\n        if(this.state.shareMode == 0){ // using camera\n            this.setState({\n                shareMode: 1\n            })\n        }\n        else {\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar password={this.state.password} user={this.state.user} history={this.props.history} isStreaming={true} />\n                <button type='button' onClick={this.SwitchShare()}>Switch share</button>\n                <div className='row' style={{ margin: '0' }}>\n                    <div id='stream-screen' className=\"col-md-9\" style={{ textAlign: 'center', backgroundColor: 'black', margin: '0' }}>\n                        <video id='camera' playsInline autoPlay muted></video>\n                    </div>\n                    <div className=\"col-md-3\" style={{ margin: '0', padding: '0' }}>\n                        <ChatContainer currentUser={this.state.user.name} messageList={this.state.messageList} commitMessage={this.CommitMessage} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}