{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport '../styles/home.style.css';\nimport { config } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.StopStreaming = () => {};\n\n    this.StartStream = () => {\n      // client list\n      const peerConnections = {}; // socket connection\n\n      const socket = io(`${config.NODE_IP}:${config.NODE_PORT}`);\n      const video = document.querySelector(\"video\"); // Use camera\n      // navigator.mediaDevices\n      //      .getUserMedia(constraints)\n      //      .then(stream => {\n      //           video.srcObject = stream;\n      //           socket.emit(\"broadcaster\");\n      //      })\n      //      .catch(error => console.error(error));\n      // Use screen\n\n      navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS).then(function (mediaStream) {\n        video.srcObject = mediaStream;\n        socket.emit(\"broadcaster\");\n      }).catch(function (err) {\n        console.log(err.name + \": \" + err.message);\n      }); // Socket handler\n\n      socket.on(\"start-watching\", clientId => {\n        const peerConnection = new RTCPeerConnection(config);\n        peerConnections[clientId] = peerConnection;\n        let stream = video.srcObject;\n        stream.getTracks().forEach(track => {\n          peerConnection.addTrack(track, stream);\n        });\n\n        peerConnection.onicecandidate = event => {\n          if (event.candidate) {\n            socket.emit(\"candidate\", clientId, event.candidate);\n          }\n        };\n\n        peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n          socket.emit(\"offer\", clientId, peerConnection.localDescription);\n        });\n      });\n      socket.on(\"answer\", (id, description) => {\n        peerConnections[id].setRemoteDescription(description);\n      });\n      socket.on(\"candidate\", (id, candidate) => {\n        peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n      });\n      socket.on(\"disconnectPeer\", id => {\n        alert(id);\n        peerConnections[id].close();\n        delete peerConnections[id];\n      });\n\n      window.onunload = window.onbeforeunload = () => {\n        socket.close();\n      };\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"User: hoangnd\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"control-btn\",\n        onClick: this.StartStream,\n        children: \"Start streaming\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stream-screen\",\n        style: {\n          margin: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          playsInline: true,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","config","BroadCaster","Component","StopStreaming","StartStream","peerConnections","socket","NODE_IP","NODE_PORT","video","document","querySelector","navigator","mediaDevices","getDisplayMedia","VIDEO_CONSTRAINS","then","mediaStream","srcObject","emit","catch","err","console","log","name","message","on","clientId","peerConnection","RTCPeerConnection","stream","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","createOffer","sdp","setLocalDescription","localDescription","id","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","alert","close","window","onunload","onbeforeunload","render","margin"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport '../styles/home.style.css'\nimport { config } from '../config'\n\nclass BroadCaster extends React.Component {\n\n    // Stop streamming\n    StopStreaming = () => {\n\n    }\n\n    // Start streaming\n    StartStream = () => {\n\n        // client list\n        const peerConnections = {};\n\n        // socket connection\n        const socket = io(`${config.NODE_IP}:${config.NODE_PORT}`);\n\n        const video = document.querySelector(\"video\");\n\n        // Use camera\n        // navigator.mediaDevices\n        //      .getUserMedia(constraints)\n        //      .then(stream => {\n        //           video.srcObject = stream;\n        //           socket.emit(\"broadcaster\");\n        //      })\n        //      .catch(error => console.error(error));\n\n        // Use screen\n        navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n            .then(function (mediaStream) {\n                video.srcObject = mediaStream;\n                socket.emit(\"broadcaster\");\n            })\n            .catch(function (err) { console.log(err.name + \": \" + err.message); });\n\n        // Socket handler\n        socket.on(\"start-watching\", clientId => {\n            const peerConnection = new RTCPeerConnection(config);\n            peerConnections[clientId] = peerConnection;\n\n            let stream = video.srcObject;\n            stream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, stream)\n            });\n\n            peerConnection.onicecandidate = event => {\n                if (event.candidate) {\n                    socket.emit(\"candidate\", clientId, event.candidate);\n                }\n            };\n\n            peerConnection\n                .createOffer()\n                .then(sdp => peerConnection.setLocalDescription(sdp))\n                .then(() => {\n                    socket.emit(\"offer\", clientId, peerConnection.localDescription);\n                });\n        });\n\n        socket.on(\"answer\", (id, description) => {\n            peerConnections[id].setRemoteDescription(description);\n        });\n\n        socket.on(\"candidate\", (id, candidate) => {\n            peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        socket.on(\"disconnectPeer\", id => {\n            alert(id)\n            peerConnections[id].close();\n            delete peerConnections[id];\n        });\n\n        window.onunload = window.onbeforeunload = () => {\n            socket.close();\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                User: hoangnd&nbsp;\n                <button id='control-btn' onClick={this.StartStream}>Start streaming</button>\n                <div id='stream-screen' style={{ margin: '20px' }}>\n                    <video playsInline autoPlay muted></video>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}