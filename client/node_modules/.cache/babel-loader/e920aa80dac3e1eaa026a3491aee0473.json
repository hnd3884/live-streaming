{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport './styles/broadcaster.style.css';\nimport configs from '../config';\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\nimport ChatContainer from \"../components/chat.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor() {\n    super(); // check if user did not sign in\n\n    this.StopStreaming = () => {};\n\n    this.SwitchShare = () => {};\n\n    let user = authService.getCurrentUser();\n\n    if (!user) {\n      this.props.history.push('/login');\n      window.location.reload();\n    }\n\n    this.state = {\n      // client list\n      peerConnections: {},\n      // socket connection\n      // socket: io(`${configs.API_URL}`),\n      user: JSON.parse(user)\n    };\n  } // componentDidMount() {\n  //     // Use camera\n  //     const videoCamera = document.getElementById(\"camera\");\n  //     navigator.mediaDevices\n  //         .getUserMedia(configs.VIDEO_CONSTRAINS)\n  //         .then(stream => {\n  //             videoCamera.srcObject = stream;\n  //             this.state.socket.emit(\"broadcaster\", this.state.user.name);\n  //         })\n  //         .catch(error => console.error(error));\n  //     // Use screen\n  //     // const videoScreen = document.getElementById(\"screen\");\n  //     // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n  //     //     .then(function (mediaStream) {\n  //     //         videoScreen.srcObject = mediaStream;\n  //     //     })\n  //     //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n  //     // Socket handler\n  //     this.state.socket.on(\"start-watching\", clientId => {\n  //         const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n  //         // update state\n  //         this.setState(prevState => {\n  //             let newPeerConnections = prevState.peerConnections\n  //             newPeerConnections[clientId] = peerConnection\n  //             return {\n  //                 socket: this.state.socket,\n  //                 peerConnections: newPeerConnections\n  //             }\n  //         })\n  //         let streamCamera = videoCamera.srcObject;\n  //         streamCamera.getTracks().forEach(track => {\n  //             peerConnection.addTrack(track, streamCamera)\n  //         });\n  //         peerConnection.onicecandidate = event => {\n  //             if (event.candidate) {\n  //                 this.state.socket.emit(\"candidate\", clientId, event.candidate);\n  //             }\n  //         };\n  //         peerConnection\n  //             .createOffer()\n  //             .then(sdp => peerConnection.setLocalDescription(sdp))\n  //             .then(() => {\n  //                 this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n  //             });\n  //     });\n  //     this.state.socket.on(\"answer\", (id, description) => {\n  //         this.state.peerConnections[id].setRemoteDescription(description);\n  //     });\n  //     this.state.socket.on(\"candidate\", (id, candidate) => {\n  //         this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n  //     });\n  //     this.state.socket.on(\"disconnectPeer\", id => {\n  //         this.state.peerConnections[id].close();\n  //         delete this.state.peerConnections[id];\n  //         console.log(this.state.peerConnections)\n  //     });\n  //     window.onunload = window.onbeforeunload = () => {\n  //         this.state.socket.close();\n  //     };\n  // }\n  // Stop streamming\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        user: this.state.user,\n        history: this.props.history,\n        isStreaming: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        style: {\n          margin: '0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stream-screen\",\n          className: \"col-md-8\",\n          style: {\n            textAlign: 'center',\n            backgroundColor: 'black',\n            margin: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"video\", {\n            id: \"camera\",\n            playsInline: true,\n            autoPlay: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-3\",\n          style: {\n            margin: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(ChatContainer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","configs","authService","NavBar","ChatContainer","BroadCaster","Component","constructor","StopStreaming","SwitchShare","user","getCurrentUser","props","history","push","window","location","reload","state","peerConnections","JSON","parse","render","margin","textAlign","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,gCAAP;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;;;AAEA,MAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAA0C;AACtCC,EAAAA,WAAW,GAAG;AACV,YADU,CAGV;;AAHU,SA4FdC,aA5Fc,GA4FE,MAAM,CAErB,CA9Fa;;AAAA,SAiGdC,WAjGc,GAiGA,MAAM,CAEnB,CAnGa;;AAIV,QAAIC,IAAI,GAAGR,WAAW,CAACS,cAAZ,EAAX;;AACA,QAAI,CAACD,IAAL,EAAW;AACP,WAAKE,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;;AAED,SAAKC,KAAL,GAAa;AACT;AACAC,MAAAA,eAAe,EAAE,EAFR;AAGT;AACA;AACAT,MAAAA,IAAI,EAAEU,IAAI,CAACC,KAAL,CAAWX,IAAX;AALG,KAAb;AAOH,GAlBqC,CAoBtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAUAY,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKJ,KAAL,CAAWR,IAAzB;AAA+B,QAAA,OAAO,EAAE,KAAKE,KAAL,CAAWC,OAAnD;AAA4D,QAAA,WAAW,EAAE;AAAzE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAqB,QAAA,KAAK,EAAE;AAACU,UAAAA,MAAM,EAAC;AAAR,SAA5B;AAAA,gCACI;AAAK,UAAA,EAAE,EAAC,eAAR;AAAwB,UAAA,SAAS,EAAC,UAAlC;AAA6C,UAAA,KAAK,EAAE;AAACC,YAAAA,SAAS,EAAC,QAAX;AAAqBC,YAAAA,eAAe,EAAC,OAArC;AAA8CF,YAAAA,MAAM,EAAC;AAArD,WAApD;AAAA,iCACI;AAAO,YAAA,EAAE,EAAC,QAAV;AAAmB,YAAA,WAAW,MAA9B;AAA+B,YAAA,QAAQ,MAAvC;AAAwC,YAAA,KAAK;AAA7C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,KAAK,EAAE;AAACA,YAAAA,MAAM,EAAC;AAAR,WAAjC;AAAA,iCACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AApHqC;;AAuH1C,eAAelB,WAAf","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport './styles/broadcaster.style.css'\nimport configs from '../config'\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\nimport ChatContainer from \"../components/chat.component\";\n\nclass BroadCaster extends React.Component {\n    constructor() {\n        super()\n\n        // check if user did not sign in\n        let user = authService.getCurrentUser();\n        if (!user) {\n            this.props.history.push('/login')\n            window.location.reload()\n        }\n\n        this.state = {\n            // client list\n            peerConnections: {},\n            // socket connection\n            // socket: io(`${configs.API_URL}`),\n            user: JSON.parse(user)\n        }\n    }\n\n    // componentDidMount() {\n\n    //     // Use camera\n    //     const videoCamera = document.getElementById(\"camera\");\n    //     navigator.mediaDevices\n    //         .getUserMedia(configs.VIDEO_CONSTRAINS)\n    //         .then(stream => {\n    //             videoCamera.srcObject = stream;\n    //             this.state.socket.emit(\"broadcaster\", this.state.user.name);\n    //         })\n    //         .catch(error => console.error(error));\n\n    //     // Use screen\n    //     // const videoScreen = document.getElementById(\"screen\");\n    //     // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n    //     //     .then(function (mediaStream) {\n    //     //         videoScreen.srcObject = mediaStream;\n    //     //     })\n    //     //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n\n    //     // Socket handler\n    //     this.state.socket.on(\"start-watching\", clientId => {\n    //         const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n\n    //         // update state\n    //         this.setState(prevState => {\n    //             let newPeerConnections = prevState.peerConnections\n    //             newPeerConnections[clientId] = peerConnection\n    //             return {\n    //                 socket: this.state.socket,\n    //                 peerConnections: newPeerConnections\n    //             }\n    //         })\n\n    //         let streamCamera = videoCamera.srcObject;\n    //         streamCamera.getTracks().forEach(track => {\n    //             peerConnection.addTrack(track, streamCamera)\n    //         });\n\n    //         peerConnection.onicecandidate = event => {\n    //             if (event.candidate) {\n    //                 this.state.socket.emit(\"candidate\", clientId, event.candidate);\n    //             }\n    //         };\n\n    //         peerConnection\n    //             .createOffer()\n    //             .then(sdp => peerConnection.setLocalDescription(sdp))\n    //             .then(() => {\n    //                 this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n    //             });\n    //     });\n\n    //     this.state.socket.on(\"answer\", (id, description) => {\n    //         this.state.peerConnections[id].setRemoteDescription(description);\n    //     });\n\n    //     this.state.socket.on(\"candidate\", (id, candidate) => {\n    //         this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    //     });\n\n    //     this.state.socket.on(\"disconnectPeer\", id => {\n    //         this.state.peerConnections[id].close();\n    //         delete this.state.peerConnections[id];\n    //         console.log(this.state.peerConnections)\n    //     });\n\n    //     window.onunload = window.onbeforeunload = () => {\n    //         this.state.socket.close();\n    //     };\n    // }\n\n    // Stop streamming\n    StopStreaming = () => {\n\n    }\n\n    // Start streaming\n    SwitchShare = () => {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar user={this.state.user} history={this.props.history} isStreaming={true} />\n                <div className='row' style={{margin:'0'}}>\n                    <div id='stream-screen' className=\"col-md-8\" style={{textAlign:'center', backgroundColor:'black', margin:'0'}}>\n                        <video id='camera' playsInline autoPlay muted></video>\n                    </div>\n                    <div className=\"col-md-3\" style={{margin:'0'}}>\n                        <ChatContainer />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}