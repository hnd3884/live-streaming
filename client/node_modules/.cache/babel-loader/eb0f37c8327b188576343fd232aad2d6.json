{"ast":null,"code":"var _jsxFileName = \"E:\\\\k_xoa_nhe\\\\client\\\\src\\\\pages\\\\watch.page.js\";\nimport React from \"react\";\nimport '../styles/home.style.css';\nimport io from 'socket.io-client';\nimport { config } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Watch extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n  }\n\n  componentDidMount() {\n    // peer connection to streamer\n    let peerConnection; // socket connection\n\n    const socket = io(`${config.NODE_IP}:${config.NODE_PORT}`);\n    const video = document.querySelector(\"video\"); // socket handler\n\n    socket.on(\"offer\", (id, description) => {\n      console.log('offer');\n      peerConnection = new RTCPeerConnection(config);\n      peerConnection.setRemoteDescription(description).then(() => peerConnection.createAnswer()).then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        socket.emit(\"answer\", id, peerConnection.localDescription);\n      });\n\n      peerConnection.ontrack = event => {\n        video.srcObject = event.streams[0];\n      };\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          socket.emit(\"candidate\", id, event.candidate);\n        }\n      };\n    });\n    socket.on(\"candidate\", (id, candidate) => {\n      peerConnection.addIceCandidate(new RTCIceCandidate(candidate)).catch(e => console.error(e));\n    });\n    socket.on(\"connect\", () => {\n      socket.emit(\"watcher\");\n    });\n    socket.on(\"broadcasters\", broadcasters => {\n      console.log(broadcasters); // socket.emit(\"watcher\");\n    });\n    socket.on(\"broadcaster\", () => {\n      socket.emit(\"watcher\");\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      socket.close();\n      peerConnection.close();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"asaas\", /*#__PURE__*/_jsxDEV(\"video\", {\n        playsInline: true,\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default Watch;","map":{"version":3,"sources":["E:/k_xoa_nhe/client/src/pages/watch.page.js"],"names":["React","io","config","Watch","Component","constructor","props","console","log","componentDidMount","peerConnection","socket","NODE_IP","NODE_PORT","video","document","querySelector","on","id","description","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","event","srcObject","streams","onicecandidate","candidate","addIceCandidate","RTCIceCandidate","catch","e","error","broadcasters","window","onunload","onbeforeunload","close","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport '../styles/home.style.css'\r\nimport io from 'socket.io-client'\r\nimport { config } from '../config'\r\n\r\nclass Watch extends React.Component {\r\n\r\n     constructor(props) {\r\n          super(props)\r\n          console.log(this.props)\r\n     }\r\n\r\n     componentDidMount() {\r\n\r\n\r\n          // peer connection to streamer\r\n          let peerConnection;\r\n\r\n          // socket connection\r\n          const socket = io(`${config.NODE_IP}:${config.NODE_PORT}`);\r\n\r\n          const video = document.querySelector(\"video\");\r\n\r\n          // socket handler\r\n          socket.on(\"offer\", (id, description) => {\r\n               console.log('offer')\r\n               peerConnection = new RTCPeerConnection(config);\r\n               peerConnection\r\n                    .setRemoteDescription(description)\r\n                    .then(() => peerConnection.createAnswer())\r\n                    .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                    .then(() => {\r\n                         socket.emit(\"answer\", id, peerConnection.localDescription);\r\n                    });\r\n               peerConnection.ontrack = event => {\r\n                    video.srcObject = event.streams[0];\r\n               };\r\n               peerConnection.onicecandidate = event => {\r\n                    if (event.candidate) {\r\n                         socket.emit(\"candidate\", id, event.candidate);\r\n                    }\r\n               };\r\n          });\r\n\r\n          socket.on(\"candidate\", (id, candidate) => {\r\n               peerConnection\r\n                    .addIceCandidate(new RTCIceCandidate(candidate))\r\n                    .catch(e => console.error(e));\r\n          });\r\n\r\n          socket.on(\"connect\", () => {\r\n               socket.emit(\"watcher\");\r\n          });\r\n\r\n          socket.on(\"broadcasters\", (broadcasters) => {\r\n               console.log(broadcasters)\r\n               // socket.emit(\"watcher\");\r\n          });\r\n\r\n          socket.on(\"broadcaster\", () => {\r\n               socket.emit(\"watcher\");\r\n          });\r\n\r\n          window.onunload = window.onbeforeunload = () => {\r\n               socket.close();\r\n               peerConnection.close();\r\n          };\r\n\r\n     }\r\n\r\n     render() {\r\n          return (\r\n               <div>\r\n                    asaas\r\n                    <video playsInline autoPlay muted></video>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Watch;"]},"metadata":{},"sourceType":"module"}