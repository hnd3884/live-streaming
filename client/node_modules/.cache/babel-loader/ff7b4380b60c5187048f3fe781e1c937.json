{"ast":null,"code":"var _jsxFileName = \"/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js\";\nimport React from \"react\";\nimport io from 'socket.io-client';\nimport './styles/broadcaster.style.css';\nimport configs from '../config';\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BroadCaster extends React.Component {\n  constructor() {\n    super(); // check if user did not sign in\n\n    this.StopStreaming = () => {};\n\n    this.SwitchShare = () => {};\n\n    let user = authService.getCurrentUser();\n\n    if (!user) {\n      this.props.history.push('/login');\n      window.location.reload();\n    }\n\n    this.state = {\n      // client list\n      peerConnections: {},\n      // socket connection\n      socket: io(`${configs.API_URL}`),\n      user: JSON.parse(user)\n    };\n  }\n\n  componentDidMount() {\n    // Use camera\n    const videoCamera = document.getElementById(\"camera\");\n    navigator.mediaDevices.getUserMedia(configs.VIDEO_CONSTRAINS).then(stream => {\n      videoCamera.srcObject = stream;\n      console.log(this.state.user.name);\n      this.state.socket.emit(\"broadcaster\", this.state.user.name);\n    }).catch(error => console.error(error)); // Use screen\n    // const videoScreen = document.getElementById(\"screen\");\n    // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n    //     .then(function (mediaStream) {\n    //         videoScreen.srcObject = mediaStream;\n    //     })\n    //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n    // Socket handler\n\n    this.state.socket.on(\"start-watching\", clientId => {\n      const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG); // update state\n\n      this.setState(prevState => {\n        let newPeerConnections = prevState.peerConnections;\n        newPeerConnections[clientId] = peerConnection;\n        return {\n          socket: this.state.socket,\n          peerConnections: newPeerConnections\n        };\n      });\n      let streamCamera = videoCamera.srcObject;\n      streamCamera.getTracks().forEach(track => {\n        peerConnection.addTrack(track, streamCamera);\n      });\n\n      peerConnection.onicecandidate = event => {\n        if (event.candidate) {\n          this.state.socket.emit(\"candidate\", clientId, event.candidate);\n        }\n      };\n\n      peerConnection.createOffer().then(sdp => peerConnection.setLocalDescription(sdp)).then(() => {\n        this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n      });\n    });\n    this.state.socket.on(\"answer\", (id, description) => {\n      this.state.peerConnections[id].setRemoteDescription(description);\n    });\n    this.state.socket.on(\"candidate\", (id, candidate) => {\n      this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n    });\n    this.state.socket.on(\"disconnectPeer\", id => {\n      this.state.peerConnections[id].close();\n      delete this.state.peerConnections[id];\n      console.log(this.state.peerConnections);\n    });\n\n    window.onunload = window.onbeforeunload = () => {\n      this.state.socket.close();\n    };\n  } // Stop streamming\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        user: this.state.user,\n        history: this.props.history,\n        isStreaming: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"stream-screen\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"camera\",\n          playsInline: true,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), \"\\xA0 \\xA0 \\xA0\", /*#__PURE__*/_jsxDEV(\"video\", {\n          id: \"screen\",\n          playsInline: true,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BroadCaster;","map":{"version":3,"sources":["/home/hoangnd/Documents/hust/20202/project/livestream/client/src/pages/broadcaster.page.js"],"names":["React","io","configs","authService","NavBar","BroadCaster","Component","constructor","StopStreaming","SwitchShare","user","getCurrentUser","props","history","push","window","location","reload","state","peerConnections","socket","API_URL","JSON","parse","componentDidMount","videoCamera","document","getElementById","navigator","mediaDevices","getUserMedia","VIDEO_CONSTRAINS","then","stream","srcObject","console","log","name","emit","catch","error","on","clientId","peerConnection","RTCPeerConnection","STUN_CONFIG","setState","prevState","newPeerConnections","streamCamera","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","createOffer","sdp","setLocalDescription","localDescription","id","description","setRemoteDescription","addIceCandidate","RTCIceCandidate","close","onunload","onbeforeunload","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from 'socket.io-client'\nimport './styles/broadcaster.style.css'\nimport configs from '../config'\nimport authService from \"../services/auth.service\";\nimport NavBar from \"../components/navbar.component\";\n\nclass BroadCaster extends React.Component {\n    constructor() {\n        super()\n\n        // check if user did not sign in\n        let user = authService.getCurrentUser();\n        if (!user) {\n            this.props.history.push('/login')\n            window.location.reload()\n        }\n\n        this.state = {\n            // client list\n            peerConnections: {},\n            // socket connection\n            socket: io(`${configs.API_URL}`),\n            user: JSON.parse(user)\n        }\n    }\n\n    componentDidMount() {\n\n        // Use camera\n        const videoCamera = document.getElementById(\"camera\");\n        navigator.mediaDevices\n            .getUserMedia(configs.VIDEO_CONSTRAINS)\n            .then(stream => {\n                videoCamera.srcObject = stream;\n                console.log(this.state.user.name)\n                this.state.socket.emit(\"broadcaster\", this.state.user.name);\n            })\n            .catch(error => console.error(error));\n\n        // Use screen\n        // const videoScreen = document.getElementById(\"screen\");\n        // navigator.mediaDevices.getDisplayMedia(config.VIDEO_CONSTRAINS)\n        //     .then(function (mediaStream) {\n        //         videoScreen.srcObject = mediaStream;\n        //     })\n        //     .catch(function (err) { console.log(err.name + \": \" + err.message); });\n\n        // Socket handler\n        this.state.socket.on(\"start-watching\", clientId => {\n            const peerConnection = new RTCPeerConnection(configs.STUN_CONFIG);\n\n            // update state\n            this.setState(prevState => {\n                let newPeerConnections = prevState.peerConnections\n                newPeerConnections[clientId] = peerConnection\n                return {\n                    socket: this.state.socket,\n                    peerConnections: newPeerConnections\n                }\n            })\n\n            let streamCamera = videoCamera.srcObject;\n            streamCamera.getTracks().forEach(track => {\n                peerConnection.addTrack(track, streamCamera)\n            });\n\n            peerConnection.onicecandidate = event => {\n                if (event.candidate) {\n                    this.state.socket.emit(\"candidate\", clientId, event.candidate);\n                }\n            };\n\n            peerConnection\n                .createOffer()\n                .then(sdp => peerConnection.setLocalDescription(sdp))\n                .then(() => {\n                    this.state.socket.emit(\"offer\", clientId, peerConnection.localDescription);\n                });\n        });\n\n        this.state.socket.on(\"answer\", (id, description) => {\n            this.state.peerConnections[id].setRemoteDescription(description);\n        });\n\n        this.state.socket.on(\"candidate\", (id, candidate) => {\n            this.state.peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\n        });\n\n        this.state.socket.on(\"disconnectPeer\", id => {\n            this.state.peerConnections[id].close();\n            delete this.state.peerConnections[id];\n            console.log(this.state.peerConnections)\n        });\n\n        window.onunload = window.onbeforeunload = () => {\n            this.state.socket.close();\n        };\n    }\n\n    // Stop streamming\n    StopStreaming = () => {\n\n    }\n\n    // Start streaming\n    SwitchShare = () => {\n\n    }\n\n    render() {\n        return (\n            <div>\n                <NavBar user={this.state.user} history={this.props.history} isStreaming={true}/>\n                <div id='stream-screen'>\n                    <video id='camera' playsInline autoPlay muted></video>\n                    &nbsp;\n                    &nbsp;\n                    &nbsp;\n                    <video id='screen' playsInline autoPlay muted></video>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default BroadCaster;"]},"metadata":{},"sourceType":"module"}